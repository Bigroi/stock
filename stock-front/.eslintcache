[{"D:\\git\\stock\\stock-front\\src\\index.js":"1","D:\\git\\stock\\stock-front\\src\\App.js":"2","D:\\git\\stock\\stock-front\\src\\reportWebVitals.js":"3","D:\\git\\stock\\stock-front\\src\\pages\\Main.js":"4","D:\\git\\stock\\stock-front\\src\\pages\\public\\Landing.js":"5","D:\\git\\stock\\stock-front\\src\\util\\i18n.js":"6","D:\\git\\stock\\stock-front\\src\\util\\Config.js":"7","D:\\git\\stock\\stock-front\\src\\util\\ApiUrls.js":"8","D:\\git\\stock\\stock-front\\src\\components\\language-switcher\\LanguageSwitcher.js":"9","D:\\git\\stock\\stock-front\\src\\components\\form\\Form.js":"10","D:\\git\\stock\\stock-front\\src\\components\\input\\Button.js":"11","D:\\git\\stock\\stock-front\\src\\components\\input\\Input.js":"12","D:\\git\\stock\\stock-front\\src\\components\\message\\Message.js":"13","D:\\git\\stock\\stock-front\\src\\util\\Request.js":"14","D:\\git\\stock\\stock-front\\src\\util\\LocalStrorageParams.js":"15","D:\\git\\stock\\stock-front\\src\\components\\checkbox\\CheckBox.js":"16","D:\\git\\stock\\stock-front\\src\\components\\map\\Map.js":"17","D:\\git\\stock\\stock-front\\src\\forms\\login\\LoginForm.js":"18","D:\\git\\stock\\stock-front\\src\\forms\\registration\\RegistrationForm.js":"19","D:\\git\\stock\\stock-front\\src\\pages\\user\\UserMain.js":"20","D:\\git\\stock\\stock-front\\src\\util\\LocalStorage.js":"21","D:\\git\\stock\\stock-front\\src\\forms\\feed-back\\FeedBackForm.js":"22","D:\\git\\stock\\stock-front\\src\\util\\VerificationUtils.js":"23","D:\\git\\stock\\stock-front\\src\\components\\input\\TextArea.js":"24","D:\\git\\stock\\stock-front\\src\\forms\\account\\AccountForm.js":"25","D:\\git\\stock\\stock-front\\src\\pages\\user\\tab\\Lots.js":"26","D:\\git\\stock\\stock-front\\src\\components\\table\\Table.js":"27","D:\\git\\stock\\stock-front\\src\\forms\\lot\\LotForm.js":"28","D:\\git\\stock\\stock-front\\src\\components\\input\\Calendar.js":"29","D:\\git\\stock\\stock-front\\src\\components\\input\\File.js":"30","D:\\git\\stock\\stock-front\\src\\components\\input\\Dropdown.js":"31","D:\\git\\stock\\stock-front\\src\\pages\\user\\tab\\Tenders.js":"32","D:\\git\\stock\\stock-front\\src\\forms\\tender\\TenderForm.js":"33","D:\\git\\stock\\stock-front\\src\\pages\\user\\tab\\Products.js":"34","D:\\git\\stock\\stock-front\\src\\forms\\product\\ProductForm.js":"35","D:\\git\\stock\\stock-front\\src\\pages\\user\\tab\\Categories.js":"36","D:\\git\\stock\\stock-front\\src\\forms\\category\\CategoryForm.js":"37","D:\\git\\stock\\stock-front\\src\\pages\\user\\tab\\Companies.js":"38","D:\\git\\stock\\stock-front\\src\\pages\\user\\tab\\Labels.js":"39","D:\\git\\stock\\stock-front\\src\\forms\\label\\LabelForm.js":"40","D:\\git\\stock\\stock-front\\src\\pages\\user\\tab\\Trade.js":"41","D:\\git\\stock\\stock-front\\src\\pages\\user\\tab\\ProductsStatistics.js":"42","D:\\git\\stock\\stock-front\\src\\pages\\user\\tab\\ProductStatisticsDetails.js":"43","D:\\git\\stock\\stock-front\\src\\pages\\user\\tab\\Deals.js":"44","D:\\git\\stock\\stock-front\\src\\pages\\user\\tab\\DealDetails.js":"45","D:\\git\\stock\\stock-front\\src\\forms\\company-feed-back\\CompanyFeedBackForm.js":"46","D:\\git\\stock\\stock-front\\src\\pages\\user\\tab\\Addresses.js":"47","D:\\git\\stock\\stock-front\\src\\forms\\address\\AddressForm.js":"48","D:\\git\\stock\\stock-front\\src\\components\\Slider.js":"49","D:\\git\\stock\\stock-front\\src\\pages\\public\\sections\\Header.js":"50","D:\\git\\stock\\stock-front\\src\\pages\\public\\sections\\Welcome.js":"51","D:\\git\\stock\\stock-front\\src\\pages\\public\\sections\\Advantages.js":"52","D:\\git\\stock\\stock-front\\src\\pages\\public\\sections\\Products.js":"53","D:\\git\\stock\\stock-front\\src\\pages\\public\\sections\\ForWhom.js":"54","D:\\git\\stock\\stock-front\\src\\pages\\public\\sections\\AboutUs.js":"55","D:\\git\\stock\\stock-front\\src\\pages\\public\\sections\\Footer.js":"56","D:\\git\\stock\\stock-front\\src\\pages\\public\\sections\\Questions.js":"57","D:\\git\\stock\\stock-front\\src\\pages\\public\\sections\\PreviewPlatform.js":"58"},{"size":597,"mtime":1607784809520,"results":"59","hashOfConfig":"60"},{"size":140,"mtime":1609709080935,"results":"61","hashOfConfig":"60"},{"size":362,"mtime":499162500000,"results":"62","hashOfConfig":"60"},{"size":1409,"mtime":1609769597739,"results":"63","hashOfConfig":"60"},{"size":3852,"mtime":1609768548002,"results":"64","hashOfConfig":"60"},{"size":950,"mtime":1609773645438,"results":"65","hashOfConfig":"60"},{"size":680,"mtime":1609709080119,"results":"66","hashOfConfig":"60"},{"size":2261,"mtime":1609709081158,"results":"67","hashOfConfig":"60"},{"size":2400,"mtime":1608229109386,"results":"68","hashOfConfig":"60"},{"size":2197,"mtime":1609709080498,"results":"69","hashOfConfig":"60"},{"size":373,"mtime":1609709080765,"results":"70","hashOfConfig":"60"},{"size":1259,"mtime":1609292254815,"results":"71","hashOfConfig":"60"},{"size":520,"mtime":1608686517851,"results":"72","hashOfConfig":"60"},{"size":4384,"mtime":1608230709661,"results":"73","hashOfConfig":"60"},{"size":233,"mtime":1608208502396,"results":"74","hashOfConfig":"60"},{"size":634,"mtime":1609709080550,"results":"75","hashOfConfig":"60"},{"size":3101,"mtime":1609773645405,"results":"76","hashOfConfig":"60"},{"size":2998,"mtime":1609709080803,"results":"77","hashOfConfig":"60"},{"size":12809,"mtime":1609773645458,"results":"78","hashOfConfig":"60"},{"size":17964,"mtime":1609709080827,"results":"79","hashOfConfig":"60"},{"size":578,"mtime":1609709080448,"results":"80","hashOfConfig":"60"},{"size":3030,"mtime":1608215806928,"results":"81","hashOfConfig":"60"},{"size":962,"mtime":1607549256410,"results":"82","hashOfConfig":"60"},{"size":852,"mtime":1609624392849,"results":"83","hashOfConfig":"60"},{"size":7270,"mtime":1609709080263,"results":"84","hashOfConfig":"60"},{"size":7271,"mtime":1609709080684,"results":"85","hashOfConfig":"60"},{"size":5128,"mtime":1609709080360,"results":"86","hashOfConfig":"60"},{"size":12784,"mtime":1609773304888,"results":"87","hashOfConfig":"60"},{"size":1079,"mtime":1608684906138,"results":"88","hashOfConfig":"60"},{"size":670,"mtime":1608675473542,"results":"89","hashOfConfig":"60"},{"size":1190,"mtime":1608762657300,"results":"90","hashOfConfig":"60"},{"size":7389,"mtime":1609709080407,"results":"91","hashOfConfig":"60"},{"size":13173,"mtime":1609773442230,"results":"92","hashOfConfig":"60"},{"size":3229,"mtime":1609709081106,"results":"93","hashOfConfig":"60"},{"size":2129,"mtime":1609709080717,"results":"94","hashOfConfig":"60"},{"size":2952,"mtime":1609709080516,"results":"95","hashOfConfig":"60"},{"size":1913,"mtime":1609709080474,"results":"96","hashOfConfig":"60"},{"size":2177,"mtime":1609709080312,"results":"97","hashOfConfig":"60"},{"size":3241,"mtime":1609709080956,"results":"98","hashOfConfig":"60"},{"size":3090,"mtime":1609709081281,"results":"99","hashOfConfig":"60"},{"size":1209,"mtime":1609709080300,"results":"100","hashOfConfig":"60"},{"size":2327,"mtime":1609709081189,"results":"101","hashOfConfig":"60"},{"size":2934,"mtime":1609709080618,"results":"102","hashOfConfig":"60"},{"size":2655,"mtime":1609709080789,"results":"103","hashOfConfig":"60"},{"size":12129,"mtime":1609709080279,"results":"104","hashOfConfig":"60"},{"size":3133,"mtime":1609709080437,"results":"105","hashOfConfig":"60"},{"size":4292,"mtime":1609709080374,"results":"106","hashOfConfig":"60"},{"size":5095,"mtime":1609773645424,"results":"107","hashOfConfig":"60"},{"size":946,"mtime":1609709081066,"results":"108","hashOfConfig":"60"},{"size":1823,"mtime":1609766248605,"results":"109","hashOfConfig":"60"},{"size":1366,"mtime":1609766591967,"results":"110","hashOfConfig":"60"},{"size":1799,"mtime":1609766694821,"results":"111","hashOfConfig":"60"},{"size":2562,"mtime":1609767661374,"results":"112","hashOfConfig":"60"},{"size":1950,"mtime":1609767661358,"results":"113","hashOfConfig":"60"},{"size":726,"mtime":1609767661388,"results":"114","hashOfConfig":"60"},{"size":935,"mtime":1609768547940,"results":"115","hashOfConfig":"60"},{"size":2461,"mtime":1609768547921,"results":"116","hashOfConfig":"60"},{"size":870,"mtime":1609768547984,"results":"117","hashOfConfig":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},"13r9h7f",{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"120"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"120"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"120"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"120"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"120"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"120"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"120"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"120"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"120"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"120"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"120"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"120"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"120"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"120"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"120"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"120"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\git\\stock\\stock-front\\src\\index.js",[],["251","252"],"D:\\git\\stock\\stock-front\\src\\App.js",[],"D:\\git\\stock\\stock-front\\src\\reportWebVitals.js",[],"D:\\git\\stock\\stock-front\\src\\pages\\Main.js",[],"D:\\git\\stock\\stock-front\\src\\pages\\public\\Landing.js",[],"D:\\git\\stock\\stock-front\\src\\util\\i18n.js",[],"D:\\git\\stock\\stock-front\\src\\util\\Config.js",["253"],"import ProdConfig from '../config-prod.json';\r\nimport TestConfig from '../config-test.json';\r\nimport DevConfig from '../local-config.json';\r\n\r\nexport default {\r\n    getConfig: () => {\r\n        if (process.env.NODE_ENV === 'production') {\r\n            if (window && window.location && window.location.href\r\n                && !window.location.href.startsWith('http://test.yourtrader.eu')\r\n                && !window.location.href.startsWith('https://test.yourtrader.eu')) {\r\n\r\n                return ProdConfig;\r\n            } else {\r\n                return TestConfig;\r\n            }\r\n        } else {\r\n            return DevConfig;\r\n        }\r\n    }\r\n}","D:\\git\\stock\\stock-front\\src\\util\\ApiUrls.js",[],"D:\\git\\stock\\stock-front\\src\\components\\language-switcher\\LanguageSwitcher.js",[],"D:\\git\\stock\\stock-front\\src\\components\\form\\Form.js",[],"D:\\git\\stock\\stock-front\\src\\components\\input\\Button.js",[],"D:\\git\\stock\\stock-front\\src\\components\\input\\Input.js",[],"D:\\git\\stock\\stock-front\\src\\components\\message\\Message.js",[],"D:\\git\\stock\\stock-front\\src\\util\\Request.js",[],"D:\\git\\stock\\stock-front\\src\\util\\LocalStrorageParams.js",[],"D:\\git\\stock\\stock-front\\src\\components\\checkbox\\CheckBox.js",[],"D:\\git\\stock\\stock-front\\src\\components\\map\\Map.js",[],"D:\\git\\stock\\stock-front\\src\\forms\\login\\LoginForm.js",["254"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport Input from '../../components/input/Input';\r\nimport Button from '../../components/input/Button';\r\nimport Request from \"../../util/Request\";\r\nimport ApiUrls from '../../util/ApiUrls';\r\nimport Message, {TYPES} from \"../../components/message/Message\";\r\n\r\n/**\r\n * toRegistration: function\r\n * onLoginSuccess: function\r\n */\r\nclass LoginForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: {\r\n                username: '',\r\n                password: ''\r\n            },\r\n            errorMessage: ''\r\n        }\r\n    }\r\n\r\n    loginRequest = () => {\r\n        const {t} = this.props;\r\n        Request.doPost(ApiUrls.AUTHENTICATE, null, this.state)\r\n            .then(async response => {\r\n                if (response.ok) {\r\n                    const authParams = await response.text();\r\n                    this.props.onLoginSuccess(JSON.parse(authParams));\r\n                } else {\r\n                    this.setState({\r\n                        errorMessage: {\r\n                            type: TYPES.ERROR,\r\n                            value: t('label.index.login_error')\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n    };\r\n\r\n    render() {\r\n        const {t} = this.props;\r\n        return <form className='form' name='form' id='login-form'>\r\n            <h3>{t('label.login.loginForm')}</h3>\r\n            <p>{t('label.login.dontHaveAcc')}\r\n                <span className='go_to_registration' onClick={this.props.toRegistration}>\r\n                    <span>{t('label.login.registerHere')}</span>\r\n                </span>\r\n            </p>\r\n            <div>\r\n                <Message message={this.state.errorMessage}/>\r\n            </div>\r\n            <Input\r\n                id='Login'\r\n                label={t('label.login.login')}\r\n                type='email'\r\n                name='username'\r\n                placeholder='johndoe@mail.xx'\r\n                value={this.state.username}\r\n                onChange={(newValue) => this.setState({username: newValue})}\r\n            />\r\n\r\n            <Input\r\n                id='Password'\r\n                label={t('label.login.password')}\r\n                type='password'\r\n                name='password'\r\n                placeholder='***********'\r\n                maxLength={50}\r\n                value={this.state.password}\r\n                onChange={(newValue) => this.setState({password: newValue})}\r\n                underline={<a id='reset'><span>{t('label.login.forgot')}</span></a>}\r\n            />\r\n            <div>\r\n                <div id='form-list'>\r\n                    <Button id='login' className='submit button' onClick={this.loginRequest}>\r\n                        {t('label.button.login')}\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    }\r\n}\r\n\r\nexport default withTranslation()(LoginForm);","D:\\git\\stock\\stock-front\\src\\forms\\registration\\RegistrationForm.js",["255","256"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport Input from '../../components/input/Input';\r\nimport Button from '../../components/input/Button';\r\nimport Request from '../../util/Request';\r\nimport ApiUrls from '../../util/ApiUrls';\r\nimport Message, {TYPES} from '../../components/message/Message';\r\nimport i18next from 'i18next';\r\nimport CheckBox from '../../components/checkbox/CheckBox';\r\nimport Map from '../../components/map/Map';\r\n\r\n/**\r\n * toLogin: function\r\n * onRegistrationSuccess: function\r\n * onAddressChanged: function\r\n */\r\nclass RegistrationForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userData: {\r\n                username: '',\r\n                password: '',\r\n                passwordRepeat: '',\r\n                companyName: '',\r\n                phone: '',\r\n                regNumber: '',\r\n                city: '',\r\n                country: '',\r\n                address: '',\r\n                latitude: 0,\r\n                longitude: 0\r\n            },\r\n            errorFields: {\r\n                username: false,\r\n                password: false,\r\n                passwordRepeat: false,\r\n                companyName: false,\r\n                phone: false,\r\n                regNumber: false,\r\n                city: false,\r\n                country: false,\r\n                address: false\r\n            },\r\n            agree: false,\r\n            agreeError: false,\r\n            step: 1,\r\n            message: null\r\n        }\r\n    }\r\n\r\n    register = () => {\r\n        const {t} = this.props;\r\n        if (this.validateEmptyFields() & this.validateAgree()) {\r\n            const data = {...this.state.userData, language: i18next.language};\r\n            Request.doPost(ApiUrls.REGISTRATION, null, data)\r\n                .then(async response => {\r\n                    const text = await response.text();\r\n                    if (response.ok) {\r\n                        const json = JSON.parse(text);\r\n                        this.props.onRegistrationSuccess(json);\r\n                    } else {\r\n                        this.setState({\r\n                            message: {\r\n                                type: TYPES.ERROR,\r\n                                value: t(text)\r\n                            }\r\n                        })\r\n                    }\r\n                });\r\n        }\r\n    };\r\n\r\n    validateAgree = () => {\r\n        this.setState({agreeError: !this.state.agree});\r\n        return this.state.agree;\r\n    };\r\n\r\n    validateEmptyFields = () => {\r\n        const errorFieldNames = [];\r\n        if (this.state.step === 1) {\r\n            if (this.state.userData.username === '') {\r\n                errorFieldNames.push('username');\r\n            }\r\n            if (this.state.userData.password === '') {\r\n                errorFieldNames.push('password');\r\n            }\r\n            if (this.state.userData.passwordRepeat === '') {\r\n                errorFieldNames.push('passwordRepeat');\r\n            }\r\n            if (this.state.userData.companyName === '') {\r\n                errorFieldNames.push('companyName');\r\n            }\r\n            if (this.state.userData.phone === '') {\r\n                errorFieldNames.push('phone');\r\n            }\r\n            if (this.state.userData.regNumber === '') {\r\n                errorFieldNames.push('regNumber');\r\n            }\r\n        } else {\r\n            if (this.state.userData.city === '') {\r\n                errorFieldNames.push('city');\r\n            }\r\n            if (this.state.userData.country === '') {\r\n                errorFieldNames.push('country');\r\n            }\r\n            if (this.state.userData.address === '') {\r\n                errorFieldNames.push('address');\r\n            }\r\n        }\r\n        if (errorFieldNames.length === 0) {\r\n            return true;\r\n        } else {\r\n            const errorFields = {};\r\n            errorFieldNames.forEach(name => errorFields[name] = true);\r\n            this.setState({errorFields: errorFields});\r\n            return false;\r\n        }\r\n    };\r\n\r\n    toStep2 = () => {\r\n        const {t} = this.props;\r\n        const noEmptyFields = this.validateEmptyFields();\r\n        if (this.state.userData.password !== this.state.userData.passwordRepeat) {\r\n            this.setState({\r\n                message: {\r\n                    type: TYPES.ERROR,\r\n                    value: t('label.account.error_password')\r\n                }\r\n            });\r\n        } else if (noEmptyFields) {\r\n            this.setState({step: 2, message: null});\r\n        }\r\n    };\r\n\r\n    setFieldValue = (fieldName, value) => {\r\n        this.setState({\r\n            userData: {\r\n                ...this.state.userData,\r\n                [fieldName]: value\r\n            },\r\n            errorFields: {\r\n                ...this.state.errorFields,\r\n                [fieldName]: value.length === 0\r\n            }\r\n        });\r\n\r\n        if (fieldName === 'city' || fieldName === 'country' || fieldName === 'address') {\r\n            this.changeAddress(fieldName, value);\r\n        }\r\n    };\r\n\r\n    changeAddress = (fieldName, value) => {\r\n        const address = {\r\n            city: this.state.userData.city,\r\n            country: this.state.userData.country,\r\n            address: this.state.userData.address,\r\n            [fieldName]: value\r\n        };\r\n\r\n        if (this.state.timer) {\r\n            clearTimeout(this.state.timer);\r\n        }\r\n        const timer = setTimeout(() =>\r\n            this.props.onAddressChanged(address).then(coords =>\r\n                this.setState({\r\n                    userData: {\r\n                        ...this.state.userData,\r\n                        latitude: coords.latitude,\r\n                        longitude: coords.longitude\r\n                    }\r\n                })\r\n            ), 1000);\r\n\r\n        this.setState({timer: timer})\r\n    };\r\n\r\n    getFirstPart = () => {\r\n        const {t} = this.props;\r\n        return <div className='registration-first-part'>\r\n            <div className='flex-input'>\r\n                <Input\r\n                    id='Login'\r\n                    label={t('label.account.login')}\r\n                    type='email'\r\n                    name='username'\r\n                    placeholder='johndoe@mail.xx'\r\n                    value={this.state.userData.username}\r\n                    error={this.state.errorFields.username}\r\n                    onChange={(newValue) => this.setFieldValue('username', newValue)}\r\n                />\r\n\r\n                <Input\r\n                    id='Phone'\r\n                    label={t('label.account.phone')}\r\n                    type='text'\r\n                    name='phone'\r\n                    placeholder={t('label.account.phone_placeholder')}\r\n                    value={this.state.userData.phone}\r\n                    error={this.state.errorFields.phone}\r\n                    onChange={(newValue) => this.setFieldValue('phone', newValue)}\r\n                    pattern={t('label.account.phone_pattern')}\r\n                />\r\n\r\n                <Input\r\n                    id='CompanyName'\r\n                    label={t('label.account.company_name')}\r\n                    type='text'\r\n                    name='companyName'\r\n                    placeholder='Stock ltd'\r\n                    maxLength={100}\r\n                    value={this.state.userData.companyName}\r\n                    error={this.state.errorFields.companyName}\r\n                    onChange={(newValue) => this.setFieldValue('companyName', newValue)}\r\n                />\r\n\r\n                <Input\r\n                    id='RegNumber'\r\n                    label={t('label.account.reg_number')}\r\n                    type='text'\r\n                    name='RegNumber'\r\n                    placeholder={t('label.account.reg_number_placeholder')}\r\n                    pattern={t('label.account.reg_number_pattern')}\r\n                    value={this.state.userData.regNumber}\r\n                    error={this.state.errorFields.regNumber}\r\n                    onChange={(newValue) => this.setFieldValue('regNumber', newValue)}\r\n                />\r\n\r\n                <Input\r\n                    id='Password'\r\n                    label={t('label.account.password')}\r\n                    type='password'\r\n                    name='password'\r\n                    placeholder='***********'\r\n                    maxLength={50}\r\n                    value={this.state.userData.password}\r\n                    error={this.state.errorFields.password}\r\n                    onChange={(newValue) => this.setFieldValue('password', newValue)}\r\n                />\r\n                <Input\r\n                    id='PasswordAgain'\r\n                    label={t('label.account.repeat_password')}\r\n                    type='password'\r\n                    name='passwordRepeat'\r\n                    placeholder='***********'\r\n                    maxLength={50}\r\n                    value={this.state.userData.passwordRepeat}\r\n                    error={this.state.errorFields.passwordRepeat}\r\n                    onChange={(newValue) => this.setFieldValue('passwordRepeat', newValue)}\r\n                />\r\n            </div>\r\n            <Button id='to-second-step' onClick={this.toStep2}>\r\n                {t('label.button.continueButton')}\r\n            </Button>\r\n            <p className='second-step'>{t('label.account.secondStepReg')}</p>\r\n        </div>\r\n    };\r\n\r\n    getSecondPart = () => {\r\n        const {t} = this.props;\r\n        return <div className='registration-second-part'>\r\n            <div className='flex-input'>\r\n                <Input\r\n                    id='City'\r\n                    className='city'\r\n                    label={t('label.account.city')}\r\n                    type='text'\r\n                    name='city'\r\n                    placeholder='Minsk'\r\n                    maxLength={100}\r\n                    value={this.state.userData.city}\r\n                    error={this.state.errorFields.city}\r\n                    onChange={(newValue) => this.setFieldValue('city', newValue)}\r\n                />\r\n                <Input\r\n                    id='Country'\r\n                    className='country'\r\n                    label={t('label.account.country')}\r\n                    type='text'\r\n                    name='city'\r\n                    placeholder='Belarus'\r\n                    maxLength={50}\r\n                    value={this.state.userData.country}\r\n                    error={this.state.errorFields.country}\r\n                    onChange={(newValue) => this.setFieldValue('country', newValue)}\r\n                />\r\n                <Input\r\n                    id='Address'\r\n                    label={t('label.account.address')}\r\n                    type='text'\r\n                    name='city'\r\n                    placeholder='str. Nezalejnasti'\r\n                    maxLength={200}\r\n                    value={this.state.userData.address}\r\n                    error={this.state.errorFields.address}\r\n                    onChange={(newValue) => this.setFieldValue('address', newValue)}\r\n                />\r\n\r\n                <div className=\"forMap google-map-container\">\r\n                    <Map coords={{latitude: this.state.userData.latitude, longitude: this.state.userData.longitude}}/>\r\n                </div>\r\n\r\n                <CheckBox\r\n                    value={this.state.agree}\r\n                    error={this.state.agreeError}\r\n                    onChange={(value) => this.setState({agree: value, agreeError: !value})}\r\n                >\r\n                    <span>{t('label.account.accept')}<a>\r\n                        <span>{t('label.account.termsOfUse')}</span>\r\n                    </a></span>\r\n                </CheckBox>\r\n            </div>\r\n            <Button id='go-back' onClick={() => this.setState({step: 1})}>\r\n                {t('label.button.back')}\r\n            </Button>\r\n            <div id='form-list'>\r\n                <Button id='finish-registration' onClick={this.register}>{t('label.button.finishRegistration')}</Button>\r\n            </div>\r\n        </div>\r\n    };\r\n\r\n    render() {\r\n        const {t} = this.props;\r\n        return <form className='form' name='form' id='registration-form'>\r\n            <h3>{t('label.account.registration')}</h3>\r\n            <p>{t('label.account.haveAcc')}\r\n                <span className='go_to_login' onClick={this.props.toLogin}>\r\n                    <span>{t('label.account.logHere')}</span>\r\n                </span>\r\n            </p>\r\n            <div>\r\n                <Message message={this.state.message}/>\r\n            </div>\r\n            {this.state.step === 1\r\n                ? this.getFirstPart()\r\n                : this.getSecondPart()}\r\n        </form>\r\n    }\r\n\r\n}\r\n\r\nexport default withTranslation()(RegistrationForm);","D:\\git\\stock\\stock-front\\src\\pages\\user\\UserMain.js",["257","258","259","260","261","262","263","264","265","266","267","268","269","270","271"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport Button from '../../components/input/Button';\r\nimport Form from '../../components/form/Form';\r\nimport LocalStorage from \"../../util/LocalStorage\";\r\nimport FeedBackForm from \"../../forms/feed-back/FeedBackForm\";\r\nimport AccountForm from \"../../forms/account/AccountForm\";\r\nimport Lots from \"./tab/Lots\";\r\nimport Tenders from \"./tab/Tenders\";\r\nimport Products from \"./tab/Products\";\r\nimport Companies from \"./tab/Companies\";\r\nimport Labels from \"./tab/Labels\";\r\nimport Trade from \"./tab/Trade\";\r\nimport ProductsStatistics from \"./tab/ProductsStatistics\";\r\nimport Categories from \"./tab/Categories\";\r\nimport ProductStatisticsDetails from \"./tab/ProductStatisticsDetails\";\r\nimport Deals from \"./tab/Deals\";\r\nimport DealDetails from \"./tab/DealDetails\";\r\nimport Addresses from \"./tab/Addresses\";\r\nimport ApiUrls from \"../../util/ApiUrls\";\r\nimport Request from \"../../util/Request\";\r\n\r\nclass UserMain extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.tabMap = this.getTabMap();\r\n        this.state = {\r\n            activeTab: this.tabMap.PRODUCTS,\r\n            feedBackFormActive: false,\r\n            accountPopupActive: false,\r\n            accountFormActive: false,\r\n            showEmptyForm: false,\r\n            mobileMenuActivated: false,\r\n            alerts: {\r\n                lastUpdate: null,\r\n                lotAlerts: 0,\r\n                tenderAlerts: 0,\r\n                dealOnApprove: 0,\r\n                canceledDeal: 0\r\n            }\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.onmousemove = () => {\r\n            if (this.state.alerts.lastUpdate < new Date(new Date().getTime() - 5 * 60000)) {\r\n                Request.doGet(ApiUrls.ALERTS)\r\n                    .then(async response => {\r\n                        if (response.ok) {\r\n                            this.setState({\r\n                                alerts: {\r\n                                    ...JSON.parse(await response.text()),\r\n                                    lastUpdate: new Date()\r\n                                }\r\n                            });\r\n                        }\r\n                    })\r\n            }\r\n        };\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.onmousemove = null;\r\n    }\r\n\r\n    getAddButton = (visible) => {\r\n        const {t} = this.props;\r\n        if (visible) {\r\n            return <div className=\"add-button\" onClick={() => this.setState({showEmptyForm: true})}>\r\n                <div className=\"plus\"/>\r\n                <p>{t('label.button.create')}</p>\r\n            </div>;\r\n        } else {\r\n            return '';\r\n        }\r\n    };\r\n\r\n    getTabMap = () => {\r\n        const {t} = this.props;\r\n        return {\r\n            ADDRESSES: {\r\n                id: 'addresses',\r\n                getTitle: () => t('label.pageNames.myAddresses'),\r\n                addButton: true,\r\n                getContent: () =>\r\n                    <Addresses\r\n                        showEmptyForm={this.state.showEmptyForm}\r\n                        onCloseForm={() => this.setState({showEmptyForm: false})}\r\n                    />\r\n            },\r\n            PRODUCTS: {\r\n                id: 'products',\r\n                getTitle: () => t('label.pageNames.products'),\r\n                addButton: false,\r\n                getContent: () =>\r\n                    <ProductsStatistics\r\n                        onDetails={(pId =>\r\n                                this.setState({activeTab: this.tabMap.PRODUCT_DETAILS, productId: pId})\r\n                        )}\r\n                    />\r\n            },\r\n            PRODUCT_DETAILS: {\r\n                id: 'productDetails',\r\n                getTitle: () => t('label.pageNames.tradeOffers'),\r\n                addButton: false,\r\n                getContent: () =>\r\n                    <ProductStatisticsDetails\r\n                        productId={this.state.productId}\r\n                        onBack={() => this.setState({activeTab: this.tabMap.PRODUCTS})}\r\n                    />\r\n            },\r\n            LOTS: {\r\n                id: 'lots',\r\n                getTitle: () => t('label.pageNames.myLots'),\r\n                addButton: true,\r\n                getContent: () =>\r\n                    <Lots\r\n                        resetAlerts={() => this.setState({alerts: {...this.state.alerts, lotAlerts: 0}})}\r\n                        showEmptyForm={this.state.showEmptyForm}\r\n                        onCloseForm={() => this.setState({showEmptyForm: false})}\r\n                    />\r\n            },\r\n            TENDERS: {\r\n                id: 'tenders',\r\n                getTitle: () => t('label.pageNames.myTenders'),\r\n                addButton: true,\r\n                getContent: () =>\r\n                    <Tenders\r\n                        resetAlerts={() => this.setState({alerts: {...this.state.alerts, tenderAlerts: 0}})}\r\n                        showEmptyForm={this.state.showEmptyForm}\r\n                        onCloseForm={() => this.setState({showEmptyForm: false})}\r\n                    />\r\n            },\r\n            DEALS: {\r\n                id: 'deals',\r\n                getTitle: () => t('label.pageNames.myDeals'),\r\n                addButton: false,\r\n                getContent: () =>\r\n                    <Deals\r\n                        resetAlerts={() => this.setState({alerts: {...this.state.alerts, canceledDeal: 0}})}\r\n                        onDetails={(dealId => this.setState({activeTab: this.tabMap.DEAL_DETAILS, dealId: dealId}))}\r\n                    />\r\n            },\r\n            DEAL_DETAILS: {\r\n                id: 'dealDetails',\r\n                getTitle: () => t('label.pageNames.deal'),\r\n                addButton: false,\r\n                getContent: () =>\r\n                    <DealDetails\r\n                        resetDealAlert={() => this.setState({\r\n                            alerts:\r\n                                {...this.state.alerts, dealOnApprove: this.state.alerts.dealOnApprove - 1}\r\n                        })}\r\n                        dealId={this.state.dealId}\r\n                        onBack={() => this.setState({activeTab: this.tabMap.DEALS})}\r\n                    />\r\n            },\r\n            PRODUCTS_ADMIN: {\r\n                id: 'productsAdmin',\r\n                getTitle: () => t('label.pageNames.productsForAdmin'),\r\n                addButton: true,\r\n                getContent: () =>\r\n                    <Products\r\n                        showEmptyForm={this.state.showEmptyForm}\r\n                        onCloseForm={() => this.setState({showEmptyForm: false})}\r\n                        onToDetails={(pId) =>\r\n                            this.setState({activeTab: this.tabMap.PRODUCT_CATEGORIES_ADMIN, productId: pId})\r\n                        }\r\n                    />\r\n            },\r\n            PRODUCT_CATEGORIES_ADMIN: {\r\n                id: 'productCategoriesAdmin',\r\n                getTitle: () => t('label.pageNames.productsForAdmin'),\r\n                addButton: true,\r\n                getContent: () =>\r\n                    <Categories\r\n                        productId={this.state.productId}\r\n                        showEmptyForm={this.state.showEmptyForm}\r\n                        onCloseForm={() => this.setState({showEmptyForm: false})}\r\n                    />\r\n            },\r\n            COMPANY: {\r\n                id: 'company',\r\n                getTitle: () => t('label.pageNames.companies'),\r\n                addButton: false,\r\n                getContent: () => <Companies/>\r\n            },\r\n            TESTS: {\r\n                id: 'tests',\r\n                getTitle: () => t('label.navigation.testBG'),\r\n                addButton: false,\r\n                getContent: () => <Trade/>\r\n            },\r\n            LABELS: {\r\n                id: 'labels',\r\n                getTitle: () => t('label.pageNames.lables'),\r\n                addButton: true,\r\n                getContent: () =>\r\n                    <Labels\r\n                        showEmptyForm={this.state.showEmptyForm}\r\n                        onCloseForm={() => this.setState({showEmptyForm: false})}\r\n                    />\r\n            }\r\n        }\r\n    };\r\n\r\n    setActiveTab = (e, tab) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            activeTab: tab,\r\n            mobileMenuActivated: false\r\n        });\r\n    };\r\n\r\n    getMenu = () => {\r\n        return <nav className='main-menu'>\r\n            <ul>\r\n                {this.getUserTabs()}\r\n                {this.getAdminTabs()}\r\n            </ul>\r\n        </nav>\r\n    };\r\n\r\n    getUserTabs = () => {\r\n        const {t} = this.props;\r\n        return <React.Fragment>\r\n            <li className={this.state.activeTab === this.tabMap.PRODUCTS\r\n            || this.state.activeTab === this.tabMap.PRODUCT_DETAILS\r\n                ? 'active'\r\n                : ''\r\n            }>\r\n                <a href='#' onClick={(e) => this.setActiveTab(e, this.tabMap.PRODUCTS)}>\r\n                    {t('label.navigation.products')}\r\n                </a>\r\n            </li>\r\n            <li className={this.state.activeTab === this.tabMap.LOTS ? 'active' : ''}>\r\n                <a href='#' onClick={(e) => this.setActiveTab(e, this.tabMap.LOTS)}>\r\n                    {t('label.navigation.lots')}\r\n                    {this.state.alerts.lotAlerts\r\n                        ? <span id='lot-alerts' className='bid-alert'>{this.state.alerts.lotAlerts}</span>\r\n                        : ''\r\n                    }\r\n                </a>\r\n            </li>\r\n            <li className={this.state.activeTab === this.tabMap.TENDERS ? 'active' : ''}>\r\n                <a href='#' onClick={(e) => this.setActiveTab(e, this.tabMap.TENDERS)}>\r\n                    {t('label.navigation.tenders')}\r\n                    {this.state.alerts.tenderAlerts\r\n                        ? <span id='tender-alerts' className='bid-alert'>{this.state.alerts.tenderAlerts}</span>\r\n                        : ''\r\n                    }\r\n                </a>\r\n            </li>\r\n            <li className={this.state.activeTab === this.tabMap.DEALS\r\n            || this.state.activeTab === this.tabMap.DEAL_DETAILS\r\n                ? 'active'\r\n                : ''\r\n            }>\r\n                <a href='#' onClick={(e) => this.setActiveTab(e, this.tabMap.DEALS)}>\r\n                    {t('label.navigation.deals')}\r\n                    {this.state.alerts.canceledDeal\r\n                        ? <span id='deal-alerts' className='deal-alert'>{this.state.alerts.canceledDeal}</span>\r\n                        : ''\r\n                    }\r\n                    {this.state.alerts.dealOnApprove\r\n                        ? <span id='deal-on-approve' className='deal-on-approve'>\r\n                            {this.state.alerts.dealOnApprove}</span>\r\n                        : ''\r\n                    }\r\n                </a>\r\n            </li>\r\n        </React.Fragment>\r\n    };\r\n\r\n    getAdminTabs = () => {\r\n        if (LocalStorage.hasRole(\"ADMIN\")) {\r\n            const {t} = this.props;\r\n            return <React.Fragment>\r\n                <li className={\r\n                    this.state.activeTab === this.tabMap.PRODUCTS_ADMIN\r\n                    || this.state.activeTab === this.tabMap.PRODUCT_CATEGORIES_ADMIN\r\n                        ? 'active'\r\n                        : ''\r\n                }>\r\n                    <a href='#' onClick={(e) => this.setActiveTab(e, this.tabMap.PRODUCTS_ADMIN)}>\r\n                        {t('label.navigation.productsExt')}\r\n                    </a>\r\n                </li>\r\n                <li className={this.state.activeTab === this.tabMap.COMPANY ? 'active' : ''}>\r\n                    <a href='#' onClick={(e) => this.setActiveTab(e, this.tabMap.COMPANY)}>\r\n                        {t('label.navigation.company')}\r\n                    </a>\r\n                </li>\r\n                <li className={this.state.activeTab === this.tabMap.TESTS ? 'active' : ''}>\r\n                    <a href='#' onClick={(e) => this.setActiveTab(e, this.tabMap.TESTS)}>\r\n                        {t('label.navigation.testBG')}\r\n                    </a>\r\n                </li>\r\n                <li className={this.state.activeTab === this.tabMap.LABELS ? 'active' : ''}>\r\n                    <a href='#' onClick={(e) => this.setActiveTab(e, this.tabMap.LABELS)}>\r\n                        {t('label.navigation.labels')}\r\n                    </a>\r\n                </li>\r\n            </React.Fragment>\r\n        } else {\r\n            return '';\r\n        }\r\n    };\r\n\r\n    getFeedBackForm = () => {\r\n        if (this.state.feedBackFormActive) {\r\n            return <Form\r\n                className='contact-us-dialogbox'\r\n                onClose={() => this.setState({feedBackFormActive: false})}\r\n            >\r\n                <FeedBackForm/>\r\n            </Form>\r\n        }\r\n    };\r\n\r\n    getAccountForm = () => {\r\n        if (this.state.accountFormActive) {\r\n            return <Form\r\n                map={true}\r\n                className='account-dialogbox'\r\n                onClose={() => this.setState({accountFormActive: false})}\r\n            >\r\n                <AccountForm\r\n                    onAddress={() => this.setState({activeTab: this.tabMap.ADDRESSES, accountFormActive: false})}\r\n                />\r\n            </Form>\r\n        }\r\n    };\r\n\r\n    getLogo = () => {\r\n        return <div className='logo-pages'>\r\n            <a href='#' onClick={(e) => this.setActiveTab(e, this.tabMap.PRODUCTS)}>\r\n                <img className='big-logo' src='/img/logo-pages.png' alt='YourTrader' title='YourTrader'/>\r\n            </a>\r\n            <div className=' small-logo'>\r\n                <div className='burger-close' onClick={() => this.setState({mobileMenuActivated: false})}/>\r\n                <div className='logo-mobile'>\r\n                    <a href='#' onClick={(e) => this.setActiveTab(e, this.tabMap.PRODUCTS)}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    };\r\n\r\n    getMobileLogo = () => {\r\n        return <div className='burger-logo'>\r\n            <div className='burger' onClick={() => this.setState({mobileMenuActivated: true})}/>\r\n            <div className='logo-mobile'>\r\n                <a href='#' onClick={(e) => this.setActiveTab(e, this.tabMap.PRODUCTS)}/>\r\n            </div>\r\n        </div>\r\n    };\r\n\r\n\r\n    getAccountButton = () => {\r\n        return <div className={`login-box ${this.state.accountPopupActive ? '' : 'login-box-shadow'}`}>\r\n            <div\r\n                className='login-button-page'\r\n                onClick={() => this.setState({accountPopupActive: !this.state.accountPopupActive})}\r\n            >\r\n                <div>\r\n                    <div>{LocalStorage.getCompanyName()}</div>\r\n                    <div className='hor_bg'/>\r\n                </div>\r\n            </div>\r\n            {this.getAccountPopup()}\r\n        </div>\r\n    };\r\n\r\n    getAccountPopup = () => {\r\n        const {t} = this.props;\r\n        if (this.state.accountPopupActive) {\r\n            return <div className='login-list'>\r\n                <div>\r\n                    <a href='#'\r\n                       className='edit-account'\r\n                       onClick={(e) => {\r\n                           e.preventDefault();\r\n                           this.setState({accountFormActive: true, accountPopupActive: false});\r\n                       }}\r\n                    >\r\n                        {t('label.navigation.account')}\r\n                    </a>\r\n                    <a href='#'\r\n                       onClick={(e) => {\r\n                           e.preventDefault();\r\n                           window.logout();\r\n                       }}\r\n                       id='session-start'>\r\n                        {t('label.navigation.logout')}\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        }\r\n    };\r\n\r\n    getAsideFooter = () => {\r\n        const {t} = this.props;\r\n        return <div className='aside-footer'>\r\n            <p className='footer-phone'>\r\n                <a href={`tel:${t('label.index.phone_prefix')}${t('label.index.phone')}`}>\r\n                    {t('label.index.phone_prefix')}<span>{t('label.index.phone')}</span>\r\n                </a>\r\n            </p>\r\n            <p className='footer-email'>\r\n                <a href={`mailto:${t('label.index.email')}`}>{t('label.index.email')}</a>\r\n            </p>\r\n            <Button\r\n                className='gray-button send-message'\r\n                onClick={() => this.setState({feedBackFormActive: true})}\r\n            >\r\n                {t('label.account.contact_us')}\r\n            </Button>\r\n            <br/><br/>\r\n        </div>\r\n    };\r\n\r\n    render() {\r\n        const addButton = this.getAddButton(this.state.activeTab.addButton);\r\n        return <React.Fragment>\r\n            {this.getFeedBackForm()}\r\n            {this.getAccountForm()}\r\n            <div className={`aside ${this.state.mobileMenuActivated ? 'aside-adaptive' : ''}`}>\r\n                {this.getLogo()}\r\n                {this.getMenu()}\r\n                {this.getAsideFooter()}\r\n            </div>\r\n            <div className='aside-modile'>\r\n                {this.getMobileLogo()}\r\n                {this.getAccountButton()}\r\n            </div>\r\n            {this.state.mobileMenuActivated ? <div className='bgdark'/> : ''}\r\n            <div className='section'>\r\n                <div className='table-header'>\r\n                    <h1>{this.state.activeTab.getTitle()}</h1>\r\n                    <div className={`table-header-button ${addButton === '' ? 'thb' : ''}`}>\r\n                        {addButton}\r\n                        {this.getAccountButton()}\r\n                    </div>\r\n                </div>\r\n                <div className='content'>\r\n                    {this.state.activeTab.getContent()}\r\n                </div>\r\n            </div>\r\n\r\n        </React.Fragment>\r\n    }\r\n\r\n}\r\n\r\nexport default withTranslation()(UserMain);","D:\\git\\stock\\stock-front\\src\\util\\LocalStorage.js",[],"D:\\git\\stock\\stock-front\\src\\forms\\feed-back\\FeedBackForm.js",[],"D:\\git\\stock\\stock-front\\src\\util\\VerificationUtils.js",["272","273","274","275","276","277","278","279","280"],"const verificationUtils = {\r\n    checkEmail: (email, t) => {\r\n        const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        if (email && !re.test(email.toLowerCase())) {\r\n            return t('enter_valid_email');\r\n        } else {\r\n            const domainPart = email.substr(email.indexOf(\"@\") + 1);\r\n            const localPart = email.substr(0, email.indexOf(\"@\"));\r\n            if (domainPart.length > 255 || localPart.length > 64) {\r\n                return t('enter_valid_email');\r\n            }\r\n        }\r\n    },\r\n    checkUrl: (value, t) => {\r\n        const re = /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/;\r\n        if (value !== '' && (!re.test(value.toLowerCase()) || value.length > 2048)) {\r\n            return t('enter_valid_url');\r\n        }\r\n    }\r\n};\r\n\r\nexport default verificationUtils;","D:\\git\\stock\\stock-front\\src\\components\\input\\TextArea.js",[],"D:\\git\\stock\\stock-front\\src\\forms\\account\\AccountForm.js",["281","282","283"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport Button from '../../components/input/Button';\r\nimport LocalStorage from '../../util/LocalStorage';\r\nimport Input from '../../components/input/Input';\r\nimport TextArea from '../../components/input/TextArea';\r\nimport VerificationUtils from '../../util/VerificationUtils';\r\nimport ApiUrls from '../../util/ApiUrls';\r\nimport Request from '../../util/Request';\r\nimport Message, {TYPES} from '../../components/message/Message';\r\nimport LanguageSwitcher from \"../../components/language-switcher/LanguageSwitcher\";\r\nimport i18next from \"i18next\";\r\n\r\nclass AccountForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: {},\r\n            error: {},\r\n            message: null\r\n        }\r\n    }\r\n\r\n    validateAccount = () => {\r\n        const {t} = this.props;\r\n        const error = {};\r\n        let message = null;\r\n        let errorsFound = false;\r\n        if (this.state.account.username === '' || VerificationUtils.checkEmail(this.state.account.username, t)) {\r\n            error.username = true;\r\n            errorsFound = true;\r\n        }\r\n        if (this.state.account.phone === '') {\r\n            error.phone = true;\r\n            errorsFound = true;\r\n        }\r\n        if (this.state.account.password !== this.state.account.repeatPassword) {\r\n            message = {\r\n                type: TYPES.ERROR,\r\n                value: t('label.account.error_password')\r\n            };\r\n            errorsFound = true;\r\n        }\r\n        if (errorsFound) {\r\n            this.setState({error: error, message: message});\r\n        }\r\n        return !errorsFound\r\n    };\r\n\r\n    componentDidMount() {\r\n        Request.doGet(ApiUrls.ACCOUNT_MANAGEMENT)\r\n            .then(async response => {\r\n                if (response.ok) {\r\n                    const json = JSON.parse(await response.text());\r\n                    this.setState({account: {...json, repeatPassword: ''}});\r\n                    this.props.onAddressChanged({\r\n                        latitude: json.latitude,\r\n                        longitude: json.longitude\r\n                    }, true)\r\n                }\r\n            })\r\n    }\r\n\r\n    submitAccount = () => {\r\n        const {t} = this.props;\r\n        if (this.validateAccount()) {\r\n            const data = {\r\n                username: this.state.account.username,\r\n                phone: this.state.account.phone,\r\n                language: this.state.account.language,\r\n                password: this.state.account.password\r\n            };\r\n            Request.doPut(ApiUrls.ACCOUNT_MANAGEMENT, null, data)\r\n                .then(async response => {\r\n                    const text = await response.text();\r\n                    if (response.ok) {\r\n                        this.setState({\r\n                            message: {\r\n                                type: TYPES.SUCCESS,\r\n                                value: t('label.account.edit_success')\r\n                            }\r\n                        });\r\n                        Request.setAuthenticationParams(JSON.parse(text));\r\n                    } else {\r\n                        this.setState({\r\n                            message: {\r\n                                type: TYPES.ERROR,\r\n                                value: t(text)\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n        }\r\n    };\r\n\r\n    changeValue = (propertyName, value) => {\r\n        this.setState({\r\n            account: {\r\n                ...this.state.account,\r\n                [propertyName]: value\r\n            },\r\n            error: {\r\n                ...this.state.error,\r\n                [propertyName]: false\r\n            }\r\n        })\r\n    };\r\n\r\n\r\n    render() {\r\n        const {t} = this.props;\r\n        return <form className=\"form\" name=\"form\" id=\"account-form\">\r\n            <h3>{t('label.account.edit')}</h3>\r\n            <div>\r\n                <Message message={this.state.message}/>\r\n            </div>\r\n            <div className=\"flex-input\">\r\n                <Input\r\n                    id='Login'\r\n                    label={t('label.account.login')}\r\n                    name='username'\r\n                    error={this.state.error.username}\r\n                    placeholder='example@mail.com'\r\n                    value={this.state.account.username}\r\n                    onChange={(newValue) => this.changeValue('username', newValue)}\r\n                />\r\n                <Input\r\n                    id='Phone'\r\n                    label={t('label.account.phone')}\r\n                    name='phone'\r\n                    error={this.state.error.phone}\r\n                    placeholder={t('label.account.phone_placeholder')}\r\n                    value={this.state.account.phone}\r\n                    pattern={t('label.account.phone_pattern')}\r\n                    onChange={(newValue) => this.changeValue('phone', newValue)}\r\n                />\r\n                <LanguageSwitcher\r\n                    label={t('label.account.company_language')}\r\n                    menuClass='selectmenu-menu-account'\r\n                    current={this.state.account.language}\r\n                    onChange={(newValue) => this.changeValue('language', newValue)}\r\n                />\r\n                <Input\r\n                    id='CompanyName'\r\n                    label={t('label.account.company_name')}\r\n                    name='company_name'\r\n                    value={this.state.account.companyName}\r\n                    disabled={true}\r\n                />\r\n                <Input\r\n                    id='RegNumber'\r\n                    label={t('label.account.reg_number')}\r\n                    name='regNumber'\r\n                    value={this.state.account.regNumber}\r\n                    disabled={true}\r\n                />\r\n                <Input\r\n                    id='Password'\r\n                    label={t('label.account.password')}\r\n                    name='password'\r\n                    type='password'\r\n                    error={this.state.error.password}\r\n                    placeholder='**************'\r\n                    value={this.state.account.password}\r\n                    maxLength={50}\r\n                    onChange={(newValue) => this.changeValue('password', newValue)}\r\n                />\r\n                <Input\r\n                    id='PasswordAgain'\r\n                    label={t('label.account.repeat_password')}\r\n                    name='password'\r\n                    type='password'\r\n                    error={this.state.error.repeatPassword}\r\n                    placeholder='**************'\r\n                    value={this.state.account.repeatPassword}\r\n                    maxLength={50}\r\n                    onChange={(newValue) => this.changeValue('repeatPassword', newValue)}\r\n                />\r\n                <div id=\"form-list\">\r\n                    <Button className=\"submit button\" onClick={this.props.onAddress}>\r\n                        {t('label.button.addAddress')}\r\n                    </Button>\r\n                    <Button className=\"submit button\" onClick={this.submitAccount}>\r\n                        {t('label.button.save')}\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    }\r\n}\r\n\r\nexport default withTranslation()(AccountForm);","D:\\git\\stock\\stock-front\\src\\pages\\user\\tab\\Lots.js",["284"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport Request from \"../../../util/Request\";\r\nimport ApiUrls from \"../../../util/ApiUrls\";\r\nimport Table from \"../../../components/table/Table\";\r\nimport Form from \"../../../components/form/Form\";\r\nimport LotForm from \"../../../forms/lot/LotForm\"\r\nimport Message, {TYPES} from \"../../../components/message/Message\";\r\n\r\nclass Lots extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [],\r\n            products: [],\r\n            addresses: [],\r\n            editLot: null\r\n        }\r\n    }\r\n\r\n    loadData = (url) => {\r\n        return Request.doGet(url)\r\n            .then(async responce => {\r\n                if (responce.ok) {\r\n                    return JSON.parse(await responce.text());\r\n                }\r\n            })\r\n    };\r\n\r\n    componentDidMount() {\r\n        const lots = this.loadData(ApiUrls.LOT_LIST);\r\n        const products = this.loadData(ApiUrls.PRODUCT_LIST);\r\n        const addresses = this.loadData(ApiUrls.ADDRESS_LIST);\r\n\r\n        Promise.all([lots, products, addresses])\r\n            .then(values => {\r\n                this.setState({\r\n                    data: values[0],\r\n                    products: values[1],\r\n                    addresses: values[2]\r\n                });\r\n            });\r\n    }\r\n\r\n    getHeader = () => {\r\n        const {t} = this.props;\r\n        return [\r\n            {name: t('label.lot.product'), weight: 2},\r\n            {name: t('label.lot.status'), weight: 3},\r\n            {name: t('label.lot.min_price'), weight: 7},\r\n            {name: t('label.lot.max_volume'), weight: 6},\r\n            {name: t('label.lot.exp_date'), weight: 4},\r\n            {name: t('label.lot.creation_date'), weight: 5},\r\n            {name: t('label.lot.edit'), weight: 1},\r\n        ]\r\n    };\r\n\r\n    remove = (id) => {\r\n        Request.doDelete(ApiUrls.LOT.replace(\"{id}\", id))\r\n            .then(responce => {\r\n                if (responce.ok) {\r\n                    this.setState({data: this.state.data.filter(l => l.id !== id)});\r\n                }\r\n            });\r\n    };\r\n\r\n    getProduct = (categoryId) => {\r\n        return this.state.products.find(p => p.categories.find(c => c.id === categoryId));\r\n    };\r\n\r\n    formatDate = (date) => {\r\n        let month = '' + (date.getMonth() + 1);\r\n        let day = '' + date.getDate()\r\n        let year = date.getFullYear();\r\n\r\n        if (month.length < 2)\r\n            month = '0' + month;\r\n        if (day.length < 2)\r\n            day = '0' + day;\r\n\r\n        return [year, month, day].join('-');\r\n    };\r\n\r\n    changeStatus = (lot) => {\r\n        const {t} = this.props;\r\n        if (lot.status === 'ACTIVE') {\r\n            Request.doPut(ApiUrls.LOT_DEACTIVATE.replace('{id}', lot.id))\r\n                .then(responce => {\r\n                    if (responce.ok) {\r\n                        const data = this.state.data.slice();\r\n                        data.find(d => d.id === lot.id).status = 'INACTIVE';\r\n                        this.setState({\r\n                            data: data,\r\n                            message: {\r\n                                type: TYPES.SUCCESS,\r\n                                value: t('label.bid.deactivated')\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n        } else if (new Date(lot.expirationDate) >= new Date()) {\r\n            Request.doPut(ApiUrls.LOT_ACTIVATE.replace('{id}', lot.id))\r\n                .then(responce => {\r\n                    if (responce.ok) {\r\n                        const data = this.state.data.slice();\r\n                        data.find(d => d.id === lot.id).status = 'ACTIVE';\r\n                        this.setState({\r\n                            data: data,\r\n                            message: {\r\n                                type: TYPES.SUCCESS,\r\n                                value: t('label.bid.activated-morning')\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n        } else {\r\n            this.setState({\r\n                message: {\r\n                    type: TYPES.ERROR,\r\n                    value: t('label.lot.expDate_error')\r\n                }\r\n            });\r\n        }\r\n        setTimeout(() => this.setState({message: null}), 3000);\r\n    };\r\n\r\n    getData = () => {\r\n        const {t} = this.props;\r\n        return this.state.data.map(l => {\r\n            return [\r\n                t(`label.${this.getProduct(l.categoryId).name}.name`),\r\n                <div className={`swtitch-row-${l.status === 'ACTIVE' ? 'on' : 'off'}`}\r\n                     onClick={() => this.changeStatus(l)}\r\n                />,\r\n                l.price,\r\n                l.maxVolume,\r\n                typeof l.expirationDate === 'string' ? l.expirationDate : this.formatDate(l.expirationDate),\r\n                typeof l.creationDate === 'string' ? l.creationDate : this.formatDate(l.creationDate),\r\n                <React.Fragment>\r\n                    <div className='edit' onClick={() => this.setState({editLot: l})}/>\r\n                    <div className='remove' onClick={() => this.remove(l.id)}/>\r\n                </React.Fragment>\r\n            ]\r\n        })\r\n    };\r\n\r\n    closeForm = () => {\r\n        this.setState({editLot: null});\r\n        this.props.onCloseForm();\r\n    };\r\n\r\n    getForm = () => {\r\n        if (this.state.editLot || this.props.showEmptyForm) {\r\n            return <Form\r\n                className='lot-dialogbox'\r\n                onClose={this.closeForm}\r\n            >\r\n                <LotForm\r\n                    lot={this.state.editLot ? {...this.state.editLot} : null}\r\n                    products={this.state.products}\r\n                    addresses={this.state.addresses}\r\n                    onSave={this.updateLotList}\r\n                />\r\n            </Form>\r\n        }\r\n    };\r\n\r\n    updateLotList = (lot, isNew) => {\r\n        const {t} = this.props;\r\n        const lots = this.state.data.slice();\r\n        if (isNew) {\r\n            lots.splice(0, 0, lot);\r\n        } else {\r\n            const lotFromList = lots.find(l => l.id === lot.id);\r\n            Object.keys(lotFromList)\r\n                .forEach(propertyName => lotFromList[propertyName] = lot[propertyName]);\r\n        }\r\n        this.setState({\r\n            data: lots,\r\n            message: {\r\n                type: TYPES.SUCCESS,\r\n                value: t(lot.status === 'ACTIVE' ? 'label.bid.activated-morning' : 'label.bid.deactivated')\r\n            }\r\n        });\r\n        setTimeout(() => this.setState({message: null}), 3000);\r\n        this.closeForm();\r\n    };\r\n\r\n    render() {\r\n        return <React.Fragment>\r\n            {this.getForm()}\r\n            <Table\r\n                data={this.getData()}\r\n                header={this.getHeader()}\r\n                message={this.state.message}\r\n                pageSize={10}\r\n            />\r\n        </React.Fragment>;\r\n    }\r\n}\r\n\r\nexport default withTranslation()(Lots);","D:\\git\\stock\\stock-front\\src\\components\\table\\Table.js",["285","286","287"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport './Table.css';\r\nimport Message from \"../message/Message\";\r\n\r\n/**\r\n * pageSize: number\r\n * data: [[any]]\r\n * header: [{name: String, weight: number}]\r\n * message: {type: String, value:String}\r\n */\r\nclass Table extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pageNumber: 1,\r\n            search: ''\r\n        }\r\n    }\r\n\r\n    getPageSize = () => {\r\n        return this.props.pageSize || 10;\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.data.length < this.props.data.length) {\r\n            this.setState({pageNumber: 1, search: ''})\r\n        }\r\n    }\r\n\r\n    getPaginator = (data) => {\r\n        console.log(data);\r\n        if (data.length > this.getPageSize()) {\r\n            return <div className=\"dataTables_paginate paging_simple_numbers\" id=\"main-table_paginate\"\r\n                        style={{display: 'block'}}>\r\n                <a className=\"paginate_button previous disabled\"\r\n                   id=\"main-table_previous\"\r\n                   onClick={() => {\r\n                       if (this.state.pageNumber > 1) {\r\n                           this.setState({pageNumber: this.state.pageNumber - 1});\r\n                       }\r\n                   }}\r\n                > </a>\r\n                <span><a className=\"paginate_button current\">{this.state.pageNumber}</a></span>\r\n                <a className=\"paginate_button next disabled\"\r\n                   id=\"main-table_next\"\r\n                   onClick={() => {\r\n                       if (this.state.pageNumber < data.length / 10) {\r\n                           this.setState({pageNumber: this.state.pageNumber + 1});\r\n                       }\r\n                   }}\r\n                > </a>\r\n            </div>\r\n        }\r\n    };\r\n\r\n    onSearchChange = (e) => {\r\n        this.setState({\r\n            search: e.currentTarget.value,\r\n            pageNumber: 1\r\n        })\r\n    };\r\n\r\n    filterData = () => {\r\n        return this.props.data\r\n            .filter(obj => Object.values(obj).find(field =>\r\n                typeof field === 'string' && field.toLowerCase().indexOf(this.state.search.toLowerCase()) >= 0));\r\n    };\r\n\r\n    getTableRows = (data) => {\r\n        const {t} = this.props;\r\n        if (data.length === 0) {\r\n            return <tr>\r\n                <td valign=\"top\" colSpan={this.props.header.length} className=\"dataTables_empty\">\r\n                    {t('label.table.emptyTable')}\r\n                </td>\r\n            </tr>\r\n        } else {\r\n            return data.map((d, rowIndex) =>\r\n                <tr role=\"row\" className=\"odd inactive-row\" key={`table-row-${rowIndex}`}>\r\n                    {d.map((cell, cellIndex) =>\r\n                        <td className={`column-weight-${this.props.header[cellIndex].weight}`}\r\n                            key={`table-row-${rowIndex}-cell-${cellIndex}`}\r\n                        >\r\n                            {cell}\r\n                        </td>\r\n                    )}\r\n                </tr>\r\n            );\r\n        }\r\n    };\r\n\r\n    getHeader = () => {\r\n        if (this.props.message) {\r\n            return <th colSpan={this.props.header.length} className='table-message-header'>\r\n                <Message message={this.props.message} className='table-message'/>\r\n            </th>\r\n        } else {\r\n            return this.props.header.map((h, index) =>\r\n                <th className={`sorting_disabled column-weight-${h.weight}`} key={`table-head-${index}`}>\r\n                    {h.name}\r\n                </th>\r\n            );\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {t} = this.props;\r\n        const filteredData = this.filterData();\r\n        const data = filteredData.slice(\r\n            (this.state.pageNumber - 1) * this.getPageSize(),\r\n            this.state.pageNumber * this.getPageSize()\r\n        );\r\n\r\n        return <div id=\"table-container\">\r\n            <div id=\"main-table_wrapper\" className=\"dataTables_wrapper no-footer\">\r\n                <div id=\"main-table_filter\" className=\"dataTables_filter\">\r\n                    <label>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder={t('label.table.searchPlaceholder')}\r\n                            onChange={this.onSearchChange}\r\n                            value={this.state.search}\r\n                        />\r\n                    </label>\r\n                </div>\r\n                <table id=\"main-table\" className=\"display responsive nowrap dataTable no-footer dtr-inline collapsed\"\r\n                       style={{width: '100%'}}>\r\n                    <thead>\r\n                    <tr role=\"row\">\r\n                        {this.getHeader()}\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {this.getTableRows(data)}\r\n                    </tbody>\r\n                </table>\r\n                {this.getPaginator(filteredData)}\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default withTranslation()(Table);","D:\\git\\stock\\stock-front\\src\\forms\\lot\\LotForm.js",["288"],"D:\\git\\stock\\stock-front\\src\\components\\input\\Calendar.js",[],"D:\\git\\stock\\stock-front\\src\\components\\input\\File.js",[],"D:\\git\\stock\\stock-front\\src\\components\\input\\Dropdown.js",[],"D:\\git\\stock\\stock-front\\src\\pages\\user\\tab\\Tenders.js",["289","290"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport Request from \"../../../util/Request\";\r\nimport ApiUrls from \"../../../util/ApiUrls\";\r\nimport Table from \"../../../components/table/Table\";\r\nimport Form from \"../../../components/form/Form\";\r\nimport LotForm from \"../../../forms/lot/LotForm\"\r\nimport Message, {TYPES} from \"../../../components/message/Message\";\r\nimport TenderForm from \"../../../forms/tender/TenderForm\";\r\n\r\nclass Tenders extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [],\r\n            products: [],\r\n            addresses: [],\r\n            editTender: null\r\n        }\r\n    }\r\n\r\n    loadData = (url) => {\r\n        return Request.doGet(url)\r\n            .then(async responce => {\r\n                if (responce.ok) {\r\n                    return JSON.parse(await responce.text());\r\n                }\r\n            })\r\n    };\r\n\r\n    componentDidMount() {\r\n        const tenders = this.loadData(ApiUrls.TENDER_LIST);\r\n        const products = this.loadData(ApiUrls.PRODUCT_LIST);\r\n        const addresses = this.loadData(ApiUrls.ADDRESS_LIST);\r\n\r\n        Promise.all([tenders, products, addresses])\r\n            .then(values => {\r\n                this.setState({\r\n                    data: values[0],\r\n                    products: values[1],\r\n                    addresses: values[2]\r\n                });\r\n            });\r\n    }\r\n\r\n    getHeader = () => {\r\n        const {t} = this.props;\r\n        return [\r\n            {name: t('label.tender.product'), weight: 2},\r\n            {name: t('label.tender.status'), weight: 3},\r\n            {name: t('label.v.max_price'), weight: 7},\r\n            {name: t('label.tender.max_volume'), weight: 6},\r\n            {name: t('label.tender.exp_date'), weight: 4},\r\n            {name: t('label.tender.creation_date'), weight: 5},\r\n            {name: t('label.tender.edit'), weight: 1},\r\n        ]\r\n    };\r\n\r\n    remove = (id) => {\r\n        Request.doDelete(ApiUrls.TENDER.replace(\"{id}\", id))\r\n            .then(responce => {\r\n                if (responce.ok) {\r\n                    this.setState({data: this.state.data.filter(l => l.id !== id)});\r\n                }\r\n            });\r\n    };\r\n\r\n    getProduct = (productId) => {\r\n        return this.state.products.find(p => p.id === productId);\r\n    };\r\n\r\n    formatDate = (date) => {\r\n        let month = '' + (date.getMonth() + 1);\r\n        let day = '' + date.getDate()\r\n        let year = date.getFullYear();\r\n\r\n        if (month.length < 2)\r\n            month = '0' + month;\r\n        if (day.length < 2)\r\n            day = '0' + day;\r\n\r\n        return [year, month, day].join('-');\r\n    };\r\n\r\n    changeStatus = (tender) => {\r\n        const {t} = this.props;\r\n        if (tender.status === 'ACTIVE') {\r\n            Request.doPut(ApiUrls.TENDER_DEACTIVATE.replace('{id}', tender.id))\r\n                .then(responce => {\r\n                    if (responce.ok) {\r\n                        const data = this.state.data.slice();\r\n                        data.find(d => d.id === tender.id).status = 'INACTIVE';\r\n                        this.setState({\r\n                            data: data,\r\n                            message: {\r\n                                type: TYPES.SUCCESS,\r\n                                value: t('label.bid.deactivated')\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n        } else if (new Date(tender.expirationDate) >= new Date()) {\r\n            Request.doPut(ApiUrls.TENDER_ACTIVATE.replace('{id}', tender.id))\r\n                .then(responce => {\r\n                    if (responce.ok) {\r\n                        const data = this.state.data.slice();\r\n                        data.find(d => d.id === tender.id).status = 'ACTIVE';\r\n                        this.setState({\r\n                            data: data,\r\n                            message: {\r\n                                type: TYPES.SUCCESS,\r\n                                value: t('label.bid.activated-morning')\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n        } else {\r\n            this.setState({\r\n                message: {\r\n                    type: TYPES.ERROR,\r\n                    value: t('label.tender.expDate_error')\r\n                }\r\n            });\r\n        }\r\n        setTimeout(() => this.setState({message: null}), 3000);\r\n    };\r\n\r\n    getData = () => {\r\n        const {t} = this.props;\r\n        return this.state.data.map(p => {\r\n            return [\r\n                t(`label.${this.getProduct(p.productId).name}.name`),\r\n                <div className={`swtitch-row-${p.status === 'ACTIVE' ? 'on' : 'off'}`}\r\n                     onClick={() => this.changeStatus(p)}\r\n                />,\r\n                p.price,\r\n                p.maxVolume,\r\n                typeof p.expirationDate === 'string' ? p.expirationDate : this.formatDate(p.expirationDate),\r\n                typeof p.creationDate === 'string' ? p.creationDate : this.formatDate(p.creationDate),\r\n                <React.Fragment>\r\n                    <div className='edit' onClick={() => this.setState({editTender: p})}/>\r\n                    <div className='remove' onClick={() => this.remove(p.id)}/>\r\n                </React.Fragment>\r\n            ]\r\n        })\r\n    };\r\n\r\n    closeForm = () => {\r\n        this.setState({editTender: null});\r\n        this.props.onCloseForm();\r\n    };\r\n\r\n    getForm = () => {\r\n        if (this.state.editTender || this.props.showEmptyForm) {\r\n            return <Form\r\n                className='tender-dialogbox'\r\n                onClose={this.closeForm}\r\n            >\r\n                <TenderForm\r\n                    tender={this.state.editTender ? {...this.state.editTender} : null}\r\n                    products={this.state.products}\r\n                    addresses={this.state.addresses}\r\n                    onSave={this.updateTenderList}\r\n                />\r\n            </Form>\r\n        }\r\n    };\r\n\r\n    updateTenderList = (tender, isNew) => {\r\n        const {t} = this.props;\r\n        const tenders = this.state.data.slice();\r\n        if (isNew) {\r\n            tenders.splice(0, 0, tender);\r\n        } else {\r\n            const tenderFromList = tenders.find(l => l.id === tender.id);\r\n            Object.keys(tenderFromList)\r\n                .forEach(propertyName => tenderFromList[propertyName] = tender[propertyName]);\r\n        }\r\n        this.setState({\r\n            data: tenders,\r\n            message: {\r\n                type: TYPES.SUCCESS,\r\n                value: t(tender.status === 'ACTIVE' ? 'label.bid.activated-morning' : 'label.bid.deactivated')\r\n            }\r\n        });\r\n        setTimeout(() => this.setState({message: null}), 3000);\r\n        this.closeForm();\r\n    };\r\n\r\n    render() {\r\n        return <React.Fragment>\r\n            {this.getForm()}\r\n            <Table\r\n                data={this.getData()}\r\n                header={this.getHeader()}\r\n                message={this.state.message}\r\n                pageSize={10}\r\n            />\r\n        </React.Fragment>;\r\n    }\r\n}\r\n\r\nexport default withTranslation()(Tenders);","D:\\git\\stock\\stock-front\\src\\forms\\tender\\TenderForm.js",[],"D:\\git\\stock\\stock-front\\src\\pages\\user\\tab\\Products.js",["291","292","293"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport Request from \"../../../util/Request\";\r\nimport ApiUrls from \"../../../util/ApiUrls\";\r\nimport Table from \"../../../components/table/Table\";\r\nimport Form from \"../../../components/form/Form\";\r\nimport LotForm from \"../../../forms/lot/LotForm\"\r\nimport Message, {TYPES} from \"../../../components/message/Message\";\r\nimport ProductForm from \"../../../forms/product/ProductForm\";\r\nimport Categories from \"./Categories\";\r\n\r\nclass Products extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        return Request.doGet(ApiUrls.PRODUCTS_ADMIN)\r\n            .then(async responce => {\r\n                if (responce.ok) {\r\n                    this.setState({data: JSON.parse(await responce.text())});\r\n                }\r\n            });\r\n    }\r\n\r\n    getHeader = () => {\r\n        const {t} = this.props;\r\n        return [\r\n            {name: t('label.product.name'), weight: 1},\r\n            {name: t('label.product.archive'), weight: 3},\r\n            {name: t('label.product.edit'), weight: 1},\r\n        ]\r\n    };\r\n\r\n    changeStatus = (product) => {\r\n        if (product.removed) {\r\n            Request.doPut(ApiUrls.PRODUCT_ADMIN_ACTIVATE.replace('{id}', product.id))\r\n                .then(responce => {\r\n                    if (responce.ok) {\r\n                        const data = this.state.data.slice();\r\n                        data.find(d => d.id === product.id).removed = false;\r\n                        this.setState({data: data});\r\n                    }\r\n                });\r\n        } else {\r\n            Request.doPut(ApiUrls.PRODUCT_ADMIN_DEACTIVATE.replace('{id}', product.id))\r\n                .then(responce => {\r\n                    if (responce.ok) {\r\n                        const data = this.state.data.slice();\r\n                        data.find(d => d.id === product.id).removed = true;\r\n                        this.setState({data: data});\r\n                    }\r\n                });\r\n        }\r\n    };\r\n\r\n    getData = () => {\r\n        const {t} = this.props;\r\n        return this.state.data.map(p => {\r\n            return [\r\n                t(`label.${p.name}.name`),\r\n                <div className={`swtitch-row-${p.removed ? 'off' : 'on'}`}\r\n                     onClick={() => this.changeStatus(p)}\r\n                />,\r\n                <div className='edit' onClick={() => this.props.onToDetails(p.id)}/>\r\n            ]\r\n        })\r\n    };\r\n\r\n    getForm = () => {\r\n        if (this.props.showEmptyForm) {\r\n            return <Form\r\n                className='product-dialogbox'\r\n                onClose={this.props.onCloseForm}\r\n            >\r\n                <ProductForm onSave={this.addProduct}/>\r\n            </Form>\r\n        }\r\n    };\r\n\r\n    addProduct = (product) => {\r\n        const products = this.state.data.slice();\r\n        products.splice(0, 0, product);\r\n        this.setState({data: products});\r\n        this.props.onCloseForm();\r\n    };\r\n\r\n    render() {\r\n        return <React.Fragment>\r\n            {this.getForm()}\r\n            <Table\r\n                data={this.getData()}\r\n                header={this.getHeader()}\r\n                pageSize={10}\r\n            />\r\n        </React.Fragment>;\r\n    }\r\n}\r\n\r\nexport default withTranslation()(Products);","D:\\git\\stock\\stock-front\\src\\forms\\product\\ProductForm.js",["294","295","296","297","298","299"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport Dropdown from \"../../components/input/Dropdown\";\r\nimport Input from \"../../components/input/Input\";\r\nimport Calendar from \"../../components/input/Calendar\";\r\nimport TextArea from \"../../components/input/TextArea\";\r\nimport Button from \"../../components/input/Button\";\r\nimport ApiUrls from '../../util/ApiUrls';\r\nimport Map from \"../../components/map/Map\";\r\nimport Request from '../../util/Request';\r\nimport Message, {TYPES} from \"../../components/message/Message\";\r\n\r\nclass ProductForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            product: {\r\n                id: null,\r\n                name: '',\r\n                picture: '',\r\n                removed: false,\r\n            }\r\n        };\r\n    }\r\n\r\n    save = () => {\r\n        const product = {...this.state.product};\r\n        Request.doPost(ApiUrls.PRODUCT_ADMIN, null, product)\r\n            .then(async responce => {\r\n                if (responce.ok) {\r\n                    product.id = JSON.parse(await responce.text());\r\n                    this.props.onSave(product);\r\n                }\r\n            });\r\n    };\r\n\r\n    render() {\r\n        const {t} = this.props;\r\n        return <form className=\"form\" name=\"form\">\r\n            <h3>{t('label.product.productForm')}</h3>\r\n            <div className=\"flex-input\">\r\n                <Input\r\n                    id='Name'\r\n                    label={t('label.product.name')}\r\n                    name='name'\r\n                    value={this.state.product.name}\r\n                    onChange={(newValue) => this.setState({product: {...this.state.product, name: newValue}})}\r\n                />\r\n\r\n                <Input\r\n                    id='Picture'\r\n                    label={t('label.product.picture')}\r\n                    name='picture'\r\n                    value={this.state.product.picture}\r\n                    onChange={(newValue) => this.setState({product: {...this.state.product, picture: newValue}})}\r\n                />\r\n\r\n                <div id=\"form-list\">\r\n                    <Button className=\"submit button\" id=\"save\" onClick={this.save}>\r\n                        {t('label.button.save')}\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    }\r\n}\r\n\r\nexport default withTranslation()(ProductForm);","D:\\git\\stock\\stock-front\\src\\pages\\user\\tab\\Categories.js",["300","301","302","303"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport Request from \"../../../util/Request\";\r\nimport ApiUrls from \"../../../util/ApiUrls\";\r\nimport Table from \"../../../components/table/Table\";\r\nimport Form from \"../../../components/form/Form\";\r\nimport LotForm from \"../../../forms/lot/LotForm\"\r\nimport Message, {TYPES} from \"../../../components/message/Message\";\r\nimport ProductForm from \"../../../forms/product/ProductForm\";\r\nimport CategoryForm from \"../../../forms/category/CategoryForm\";\r\n\r\nclass Categories extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        return Request.doGet(ApiUrls.PRODUCT_CATEGORIES_ADMIN.replace('{productId}', this.props.productId))\r\n            .then(async response => {\r\n                if (response.ok) {\r\n                    this.setState({ data: JSON.parse(await response.text())});\r\n                }\r\n            });\r\n    }\r\n\r\n    getHeader = () => {\r\n        const {t} = this.props;\r\n        return [\r\n            {name: t('label.product.name'), weight: 1},\r\n            {name: t('label.product.archive'), weight: 2},\r\n        ]\r\n    };\r\n\r\n    changeStatus = (category) => {\r\n        const baseUrl = category.removed\r\n            ? ApiUrls.PRODUCT_CATEGORY_ADMIN_ACTIVATE\r\n            : ApiUrls.PRODUCT_CATEGORY_ADMIN_DEACTIVATE;\r\n\r\n        const url = baseUrl\r\n            .replace('{id}', category.id)\r\n            .replace('{productId}', this.props.productId);\r\n\r\n        Request.doPut(url)\r\n            .then(responce => {\r\n                if (responce.ok) {\r\n                    const data = this.state.data.slice();\r\n                    data.find(d => d.id === category.id).removed = !category.removed;\r\n                    this.setState({data: data});\r\n                }\r\n            });\r\n    };\r\n\r\n    getData = () => {\r\n        const {t} = this.props;\r\n        return this.state.data.map(c => {\r\n            return [\r\n                t(`label.${c.categoryName}.name`),\r\n                <div className={`swtitch-row-${c.removed ? 'off' : 'on'}`}\r\n                     onClick={() => this.changeStatus(c)}\r\n                />\r\n            ]\r\n        })\r\n    };\r\n\r\n    getForm = () => {\r\n        if (this.props.showEmptyForm) {\r\n            return <Form\r\n                className='product-dialogbox'\r\n                onClose={this.props.onCloseForm}\r\n            >\r\n                <CategoryForm onSave={this.addCategory} productId={this.props.productId}/>\r\n            </Form>\r\n        }\r\n    };\r\n\r\n    addCategory = (category) => {\r\n        const categories = this.state.data.slice();\r\n        categories.splice(0, 0, category);\r\n        this.setState({data: categories});\r\n        this.props.onCloseForm();\r\n    };\r\n\r\n    render() {\r\n        return <React.Fragment>\r\n            {this.getForm()}\r\n            <Table\r\n                data={this.getData()}\r\n                header={this.getHeader()}\r\n                pageSize={10}\r\n            />\r\n        </React.Fragment>;\r\n    }\r\n}\r\n\r\nexport default withTranslation()(Categories);","D:\\git\\stock\\stock-front\\src\\forms\\category\\CategoryForm.js",[],"D:\\git\\stock\\stock-front\\src\\pages\\user\\tab\\Companies.js",[],"D:\\git\\stock\\stock-front\\src\\pages\\user\\tab\\Labels.js",["304"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport Request from \"../../../util/Request\";\r\nimport ApiUrls from \"../../../util/ApiUrls\";\r\nimport Table from \"../../../components/table/Table\";\r\nimport Form from \"../../../components/form/Form\";\r\nimport LotForm from \"../../../forms/lot/LotForm\"\r\nimport LabelForm from \"../../../forms/label/LabelForm\";\r\n\r\nclass Categories extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [],\r\n            editLabel: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        return Request.doGet(ApiUrls.LABELS_ADMIN)\r\n            .then(async response => {\r\n                if (response.ok) {\r\n                    this.setState({data: JSON.parse(await response.text())});\r\n                }\r\n            });\r\n    }\r\n\r\n    getHeader = () => {\r\n        const {t} = this.props;\r\n        return [\r\n            {name: t('label.labels.name'), weight: 1},\r\n            {name: t('label.labels.english'), weight: 3},\r\n            {name: t('label.labels.poland'), weight: 4},\r\n            {name: t('label.labels.russian'), weight: 5},\r\n            {name: t('label.labels.edit'), weight: 1},\r\n        ]\r\n    };\r\n\r\n    remove = (name) => {\r\n        Request.doDelete(ApiUrls.LABEL_ADMIN.replace(\"{name}\", name))\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    this.setState({data: this.state.data.filter(l => l.name !== name)});\r\n                }\r\n            });\r\n    };\r\n\r\n    getData = () => {\r\n        return this.state.data.map(l => {\r\n            return [\r\n                l.name,\r\n                l.labels.EN,\r\n                l.labels.PL,\r\n                l.labels.RU,\r\n                <React.Fragment>\r\n                    <div className='edit' onClick={() => this.setState({editLabel: l})}/>\r\n                    <div className='remove' onClick={() => this.remove(l.name)}/>\r\n                </React.Fragment>\r\n            ]\r\n        })\r\n    };\r\n\r\n    closeForm = () => {\r\n        this.setState({editLabel: null});\r\n        this.props.onCloseForm();\r\n    };\r\n\r\n    getForm = () => {\r\n        if (this.state.editLabel || this.props.showEmptyForm) {\r\n            return <Form\r\n                className='label-dialogbox'\r\n                onClose={this.closeForm}\r\n            >\r\n                <LabelForm onSave={this.changeLabelList} label={this.state.editLabel ? this.state.editLabel : null}/>\r\n            </Form>\r\n        }\r\n    };\r\n\r\n    changeLabelList = (label, isNew) => {\r\n        const labels = this.state.data.slice();\r\n        if (isNew) {\r\n            labels.splice(0, 0, label);\r\n        } else {\r\n            const labelFromList = labels.find(l => l.id === label.id);\r\n            Object.keys(labelFromList)\r\n                .forEach(propertyName => labelFromList[propertyName] = label[propertyName]);\r\n        }\r\n        this.setState({data: labels});\r\n        this.closeForm();\r\n    };\r\n\r\n    render() {\r\n        return <React.Fragment>\r\n            {this.getForm()}\r\n            <Table\r\n                data={this.getData()}\r\n                header={this.getHeader()}\r\n                pageSize={10}\r\n            />\r\n        </React.Fragment>;\r\n    }\r\n}\r\n\r\nexport default withTranslation()(Categories);","D:\\git\\stock\\stock-front\\src\\forms\\label\\LabelForm.js",[],"D:\\git\\stock\\stock-front\\src\\pages\\user\\tab\\Trade.js",[],"D:\\git\\stock\\stock-front\\src\\pages\\user\\tab\\ProductsStatistics.js",["305","306","307","308","309","310","311"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport Request from \"../../../util/Request\";\r\nimport ApiUrls from \"../../../util/ApiUrls\";\r\nimport Table from \"../../../components/table/Table\";\r\nimport Form from \"../../../components/form/Form\";\r\nimport LotForm from \"../../../forms/lot/LotForm\"\r\nimport Message, {TYPES} from \"../../../components/message/Message\";\r\nimport ProductForm from \"../../../forms/product/ProductForm\";\r\nimport CategoryForm from \"../../../forms/category/CategoryForm\";\r\nimport Button from \"../../../components/input/Button\";\r\n\r\nclass ProductsStatistics extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        Request.doGet(ApiUrls.PRODUCTS_STATISTICS)\r\n            .then(async response => {\r\n                if (response.ok) {\r\n                    this.setState({data: JSON.parse(await response.text())});\r\n                }\r\n            });\r\n    }\r\n\r\n    getCard = (product) => {\r\n        const {t} = this.props;\r\n        return <div className=\"product\"\r\n                    style={{backgroundImage: `url(\"${product.picture}\")`}}\r\n                    key={`product-card-for-${product.id}`}\r\n        >\r\n            <h4>{t(`label.${product.name}.name`)}</h4>\r\n            <Button className=\"background-blue\" onClick={() => this.props.onDetails(product.id)}>\r\n                {t('label.product.details')}\r\n            </Button>\r\n            <div className=\"about-product\">\r\n                <table>\r\n                    <thead>\r\n                    <tr>\r\n                        <td/>\r\n                        <td>{t('label.index.average_price')}</td>\r\n                        <td>{t('label.index.requests_volume')}</td>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    <tr className=\"sell-tr\">\r\n                        <td>{t('label.index.sell')}</td>\r\n                        <td>{product.sell.price}</td>\r\n                        <td>{product.sell.volume}</td>\r\n                    </tr>\r\n                    <tr className=\"buy-tr\">\r\n                        <td>{t('label.index.buy')}</td>\r\n                        <td>{product.buy.price}</td>\r\n                        <td>{product.sell.volume}</td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>;\r\n    };\r\n\r\n    render() {\r\n        return <div className=\"product-cont authorised product-page\">\r\n            {this.state.data.map(this.getCard)}\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default withTranslation()(ProductsStatistics);","D:\\git\\stock\\stock-front\\src\\pages\\user\\tab\\ProductStatisticsDetails.js",["312","313","314","315","316","317","318"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport Request from \"../../../util/Request\";\r\nimport ApiUrls from \"../../../util/ApiUrls\";\r\nimport Table from \"../../../components/table/Table\";\r\nimport Form from \"../../../components/form/Form\";\r\nimport LotForm from \"../../../forms/lot/LotForm\"\r\nimport Message, {TYPES} from \"../../../components/message/Message\";\r\nimport ProductForm from \"../../../forms/product/ProductForm\";\r\nimport CategoryForm from \"../../../forms/category/CategoryForm\";\r\nimport Button from \"../../../components/input/Button\";\r\n\r\nclass ProductsStatistics extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            product: {\r\n                name: '',\r\n                picture: '',\r\n                rows: []\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        Request.doGet(ApiUrls.PRODUCTS_STATISTICS_DETAILS.replace('{id}', this.props.productId))\r\n            .then(async response => {\r\n                if (response.ok) {\r\n                    this.setState({product: JSON.parse(await response.text())});\r\n                }\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const {t} = this.props;\r\n        return <div className=\"white-div\">\r\n            <div className=\"header-white-div\" style={{backgroundImage: `url('${this.state.product.picture}')`}}>\r\n                <form className=\"form form-tradeOffers\" name=\"form\">\r\n                    <ul>\r\n                        <li>\r\n                            <input type=\"text\" disabled={true} value={t(`label.${this.state.product.name}.name`)}/>\r\n                        </li>\r\n                    </ul>\r\n                </form>\r\n            </div>\r\n\r\n            <div className=\"table-tradeOffers\">\r\n                <div id=\"main-table_wrapper\" className=\"dataTables_wrapper no-footer\">\r\n                    <table id=\"main-table\" className=\"display responsive nowrap dataTable no-footer dtr-inline\">\r\n                        <thead>\r\n                        <tr role=\"row\">\r\n                            <th>{t('label.product.price')}</th>\r\n                            <th>{t('label.product.lot_volume')}</th>\r\n                            <th>{t('label.product.tender_volume')}</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {this.state.product.rows.map(r =>\r\n                            <tr key={`product-depails-for-${r.price}`}>\r\n                                <td>{r.price}</td>\r\n                                <td>{r.lotVolume}</td>\r\n                                <td>{r.tenderVolume}</td>\r\n                            </tr>\r\n                        )}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n\r\n            <form className=\"form form-tradeOffers-button \">\r\n                <ul>\r\n                    <li>\r\n                        <Button className=\"submit fs-submit gray-button\" onClick={this.props.onBack}>\r\n                            {t('label.button.back')}\r\n                        </Button>\r\n                    </li>\r\n                </ul>\r\n            </form>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default withTranslation()(ProductsStatistics);","D:\\git\\stock\\stock-front\\src\\pages\\user\\tab\\Deals.js",[],"D:\\git\\stock\\stock-front\\src\\pages\\user\\tab\\DealDetails.js",[],"D:\\git\\stock\\stock-front\\src\\forms\\company-feed-back\\CompanyFeedBackForm.js",["319","320","321","322","323"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport Button from '../../components/input/Button';\r\nimport LocalStorage from '../../util/LocalStorage';\r\nimport Input from '../../components/input/Input';\r\nimport TextArea from '../../components/input/TextArea';\r\nimport VerificationUtils from '../../util/VerificationUtils';\r\nimport ApiUrls from '../../util/ApiUrls';\r\nimport Request from '../../util/Request';\r\nimport Message, {TYPES} from '../../components/message/Message';\r\n\r\nclass CompanyFeedBackForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isNew: true,\r\n            mark: 5,\r\n            preMark: null,\r\n            comment: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        Request.doGet(ApiUrls.DEAL_FEED_BACK.replace(\"{id}\", this.props.dealId))\r\n            .then(async response => {\r\n                if (response.ok) {\r\n                    this.setState({...JSON.parse(await response.text()), isNew: false});\r\n                    return null;\r\n                } else {\r\n                    return null;\r\n                }\r\n            });\r\n    }\r\n\r\n    getStarClass = (mark) => {\r\n        return (this.state.preMark || this.state.mark) >= mark\r\n            ? 'reviewStarsFeed-start-checked'\r\n            : 'reviewStarsFeed-start-unchecked'\r\n    };\r\n\r\n    renderMark = () => {\r\n        return <div className=\"reviewStarsFeed\">\r\n            {[5, 4, 3, 2, 1]\r\n                .map(mark =>\r\n                    <label\r\n                        key={`star-${mark}`}\r\n                        className={this.getStarClass(mark)}\r\n                        onClick={() => this.setState({mark: mark})}\r\n                        onMouseEnter={() => this.setState({preMark: mark})}\r\n                        onMouseLeave={() => this.setState({preMark: null})}\r\n                    />\r\n                )}\r\n        </div>\r\n    };\r\n\r\n    submitFeedBack = () => {\r\n        const method = this.state.isNew\r\n            ? Request.doPost\r\n            : Request.doPut;\r\n        method(ApiUrls.DEAL_FEED_BACK.replace(\"{id}\", this.props.dealId),\r\n            null,\r\n            {\r\n                mark: this.state.mark,\r\n                comment: this.state.comment\r\n            }\r\n        ).then(response => {\r\n            if (response.ok) {\r\n                this.props.onClose();\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {t} = this.props;\r\n        return <form className='form' name='form'>\r\n            <h3>{t('label.deal.feedback')}</h3>\r\n            <div className='flex-input'>\r\n                {this.renderMark()}\r\n                <TextArea\r\n                    id='Comment'\r\n                    label={t('label.comment.feedback')}\r\n                    name='comment'\r\n                    className='comment'\r\n                    maxLength={500}\r\n                    value={this.state.comment}\r\n                    onChange={(newValue => this.setState({comment: newValue}))}\r\n                />\r\n                <div id='form-list'>\r\n                    <Button className='submit button' id='save' onClick={this.submitFeedBack}>\r\n                        {t('label.button.save')}\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    }\r\n}\r\n\r\nexport default withTranslation()(CompanyFeedBackForm);","D:\\git\\stock\\stock-front\\src\\pages\\user\\tab\\Addresses.js",[],"D:\\git\\stock\\stock-front\\src\\forms\\address\\AddressForm.js",[],"D:\\git\\stock\\stock-front\\src\\components\\Slider.js",[],"D:\\git\\stock\\stock-front\\src\\pages\\public\\sections\\Header.js",[],"D:\\git\\stock\\stock-front\\src\\pages\\public\\sections\\Welcome.js",[],"D:\\git\\stock\\stock-front\\src\\pages\\public\\sections\\Advantages.js",[],"D:\\git\\stock\\stock-front\\src\\pages\\public\\sections\\Products.js",[],"D:\\git\\stock\\stock-front\\src\\pages\\public\\sections\\ForWhom.js",[],"D:\\git\\stock\\stock-front\\src\\pages\\public\\sections\\AboutUs.js",[],"D:\\git\\stock\\stock-front\\src\\pages\\public\\sections\\Footer.js",["324"],"D:\\git\\stock\\stock-front\\src\\pages\\public\\sections\\Questions.js",["325"],"D:\\git\\stock\\stock-front\\src\\pages\\public\\sections\\PreviewPlatform.js",[],{"ruleId":"326","replacedBy":"327"},{"ruleId":"328","replacedBy":"329"},{"ruleId":"330","severity":1,"message":"331","line":5,"column":1,"nodeType":"332","endLine":20,"endColumn":2},{"ruleId":"333","severity":1,"message":"334","line":75,"column":28,"nodeType":"335","endLine":75,"endColumn":42},{"ruleId":"336","severity":1,"message":"337","line":10,"column":14,"nodeType":"338","messageId":"339","endLine":10,"endColumn":26},{"ruleId":"333","severity":1,"message":"334","line":309,"column":54,"nodeType":"335","endLine":309,"endColumn":57},{"ruleId":"333","severity":1,"message":"340","line":226,"column":17,"nodeType":"335","endLine":226,"endColumn":89},{"ruleId":"333","severity":1,"message":"340","line":231,"column":17,"nodeType":"335","endLine":231,"endColumn":85},{"ruleId":"333","severity":1,"message":"340","line":240,"column":17,"nodeType":"335","endLine":240,"endColumn":88},{"ruleId":"333","severity":1,"message":"340","line":253,"column":17,"nodeType":"335","endLine":253,"endColumn":86},{"ruleId":"333","severity":1,"message":"340","line":279,"column":21,"nodeType":"335","endLine":279,"endColumn":99},{"ruleId":"333","severity":1,"message":"340","line":284,"column":21,"nodeType":"335","endLine":284,"endColumn":92},{"ruleId":"333","severity":1,"message":"340","line":289,"column":21,"nodeType":"335","endLine":289,"endColumn":90},{"ruleId":"333","severity":1,"message":"340","line":294,"column":21,"nodeType":"335","endLine":294,"endColumn":91},{"ruleId":"333","severity":1,"message":"340","line":331,"column":13,"nodeType":"335","endLine":331,"endColumn":85},{"ruleId":"341","severity":1,"message":"342","line":337,"column":21,"nodeType":"335","endLine":337,"endColumn":94},{"ruleId":"333","severity":1,"message":"340","line":337,"column":21,"nodeType":"335","endLine":337,"endColumn":94},{"ruleId":"341","severity":1,"message":"342","line":347,"column":17,"nodeType":"335","endLine":347,"endColumn":90},{"ruleId":"333","severity":1,"message":"340","line":347,"column":17,"nodeType":"335","endLine":347,"endColumn":90},{"ruleId":"333","severity":1,"message":"340","line":373,"column":21,"nodeType":"335","endLine":379,"endColumn":22},{"ruleId":"333","severity":1,"message":"340","line":382,"column":21,"nodeType":"335","endLine":387,"endColumn":43},{"ruleId":"343","severity":1,"message":"344","line":3,"column":30,"nodeType":"345","messageId":"346","endLine":3,"endColumn":31,"suggestions":"347"},{"ruleId":"343","severity":1,"message":"344","line":3,"column":55,"nodeType":"345","messageId":"346","endLine":3,"endColumn":56,"suggestions":"348"},{"ruleId":"343","severity":1,"message":"349","line":15,"column":55,"nodeType":"345","messageId":"346","endLine":15,"endColumn":56,"suggestions":"350"},{"ruleId":"343","severity":1,"message":"349","line":15,"column":67,"nodeType":"345","messageId":"346","endLine":15,"endColumn":68,"suggestions":"351"},{"ruleId":"343","severity":1,"message":"352","line":15,"column":80,"nodeType":"345","messageId":"346","endLine":15,"endColumn":81,"suggestions":"353"},{"ruleId":"343","severity":1,"message":"354","line":15,"column":84,"nodeType":"345","messageId":"346","endLine":15,"endColumn":85,"suggestions":"355"},{"ruleId":"343","severity":1,"message":"356","line":15,"column":86,"nodeType":"345","messageId":"346","endLine":15,"endColumn":87,"suggestions":"357"},{"ruleId":"343","severity":1,"message":"358","line":15,"column":88,"nodeType":"345","messageId":"346","endLine":15,"endColumn":89,"suggestions":"359"},{"ruleId":"343","severity":1,"message":"360","line":15,"column":90,"nodeType":"345","messageId":"346","endLine":15,"endColumn":91,"suggestions":"361"},{"ruleId":"336","severity":1,"message":"362","line":4,"column":8,"nodeType":"338","messageId":"339","endLine":4,"endColumn":20},{"ruleId":"336","severity":1,"message":"363","line":6,"column":8,"nodeType":"338","messageId":"339","endLine":6,"endColumn":16},{"ruleId":"336","severity":1,"message":"364","line":12,"column":8,"nodeType":"338","messageId":"339","endLine":12,"endColumn":15},{"ruleId":"336","severity":1,"message":"365","line":8,"column":8,"nodeType":"338","messageId":"339","endLine":8,"endColumn":15},{"ruleId":"333","severity":1,"message":"334","line":37,"column":17,"nodeType":"335","endLine":44,"endColumn":18},{"ruleId":"333","severity":1,"message":"334","line":45,"column":23,"nodeType":"335","endLine":45,"endColumn":62},{"ruleId":"333","severity":1,"message":"334","line":46,"column":17,"nodeType":"335","endLine":53,"endColumn":18},{"ruleId":"333","severity":1,"message":"340","line":291,"column":35,"nodeType":"335","endLine":291,"endColumn":82},{"ruleId":"336","severity":1,"message":"366","line":7,"column":8,"nodeType":"338","messageId":"339","endLine":7,"endColumn":15},{"ruleId":"336","severity":1,"message":"365","line":8,"column":8,"nodeType":"338","messageId":"339","endLine":8,"endColumn":15},{"ruleId":"336","severity":1,"message":"366","line":7,"column":8,"nodeType":"338","messageId":"339","endLine":7,"endColumn":15},{"ruleId":"336","severity":1,"message":"365","line":8,"column":8,"nodeType":"338","messageId":"339","endLine":8,"endColumn":15},{"ruleId":"336","severity":1,"message":"367","line":8,"column":18,"nodeType":"338","messageId":"339","endLine":8,"endColumn":23},{"ruleId":"336","severity":1,"message":"368","line":3,"column":8,"nodeType":"338","messageId":"339","endLine":3,"endColumn":16},{"ruleId":"336","severity":1,"message":"369","line":5,"column":8,"nodeType":"338","messageId":"339","endLine":5,"endColumn":16},{"ruleId":"336","severity":1,"message":"363","line":6,"column":8,"nodeType":"338","messageId":"339","endLine":6,"endColumn":16},{"ruleId":"336","severity":1,"message":"370","line":9,"column":8,"nodeType":"338","messageId":"339","endLine":9,"endColumn":11},{"ruleId":"336","severity":1,"message":"365","line":11,"column":8,"nodeType":"338","messageId":"339","endLine":11,"endColumn":15},{"ruleId":"336","severity":1,"message":"367","line":11,"column":18,"nodeType":"338","messageId":"339","endLine":11,"endColumn":23},{"ruleId":"336","severity":1,"message":"366","line":7,"column":8,"nodeType":"338","messageId":"339","endLine":7,"endColumn":15},{"ruleId":"336","severity":1,"message":"365","line":8,"column":8,"nodeType":"338","messageId":"339","endLine":8,"endColumn":15},{"ruleId":"336","severity":1,"message":"367","line":8,"column":18,"nodeType":"338","messageId":"339","endLine":8,"endColumn":23},{"ruleId":"336","severity":1,"message":"371","line":9,"column":8,"nodeType":"338","messageId":"339","endLine":9,"endColumn":19},{"ruleId":"336","severity":1,"message":"366","line":7,"column":8,"nodeType":"338","messageId":"339","endLine":7,"endColumn":15},{"ruleId":"336","severity":1,"message":"372","line":5,"column":8,"nodeType":"338","messageId":"339","endLine":5,"endColumn":13},{"ruleId":"336","severity":1,"message":"373","line":6,"column":8,"nodeType":"338","messageId":"339","endLine":6,"endColumn":12},{"ruleId":"336","severity":1,"message":"366","line":7,"column":8,"nodeType":"338","messageId":"339","endLine":7,"endColumn":15},{"ruleId":"336","severity":1,"message":"365","line":8,"column":8,"nodeType":"338","messageId":"339","endLine":8,"endColumn":15},{"ruleId":"336","severity":1,"message":"367","line":8,"column":18,"nodeType":"338","messageId":"339","endLine":8,"endColumn":23},{"ruleId":"336","severity":1,"message":"371","line":9,"column":8,"nodeType":"338","messageId":"339","endLine":9,"endColumn":19},{"ruleId":"336","severity":1,"message":"374","line":10,"column":8,"nodeType":"338","messageId":"339","endLine":10,"endColumn":20},{"ruleId":"336","severity":1,"message":"372","line":5,"column":8,"nodeType":"338","messageId":"339","endLine":5,"endColumn":13},{"ruleId":"336","severity":1,"message":"373","line":6,"column":8,"nodeType":"338","messageId":"339","endLine":6,"endColumn":12},{"ruleId":"336","severity":1,"message":"366","line":7,"column":8,"nodeType":"338","messageId":"339","endLine":7,"endColumn":15},{"ruleId":"336","severity":1,"message":"365","line":8,"column":8,"nodeType":"338","messageId":"339","endLine":8,"endColumn":15},{"ruleId":"336","severity":1,"message":"367","line":8,"column":18,"nodeType":"338","messageId":"339","endLine":8,"endColumn":23},{"ruleId":"336","severity":1,"message":"371","line":9,"column":8,"nodeType":"338","messageId":"339","endLine":9,"endColumn":19},{"ruleId":"336","severity":1,"message":"374","line":10,"column":8,"nodeType":"338","messageId":"339","endLine":10,"endColumn":20},{"ruleId":"336","severity":1,"message":"362","line":4,"column":8,"nodeType":"338","messageId":"339","endLine":4,"endColumn":20},{"ruleId":"336","severity":1,"message":"375","line":5,"column":8,"nodeType":"338","messageId":"339","endLine":5,"endColumn":13},{"ruleId":"336","severity":1,"message":"376","line":7,"column":8,"nodeType":"338","messageId":"339","endLine":7,"endColumn":25},{"ruleId":"336","severity":1,"message":"365","line":10,"column":8,"nodeType":"338","messageId":"339","endLine":10,"endColumn":15},{"ruleId":"336","severity":1,"message":"367","line":10,"column":18,"nodeType":"338","messageId":"339","endLine":10,"endColumn":23},{"ruleId":"333","severity":1,"message":"340","line":16,"column":41,"nodeType":"335","endLine":16,"endColumn":52},{"ruleId":"333","severity":1,"message":"340","line":52,"column":37,"nodeType":"335","endLine":52,"endColumn":48},"no-native-reassign",["377"],"no-negated-in-lhs",["378"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'MapContainer' is defined but never used.","Identifier","unusedVar","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["379","380"],["381","382"],"Unnecessary escape character: \\..",["383","384"],["385","386"],"Unnecessary escape character: \\$.",["387","388"],"Unnecessary escape character: \\(.",["389","390"],"Unnecessary escape character: \\).",["391","392"],"Unnecessary escape character: \\*.",["393","394"],"Unnecessary escape character: \\+.",["395","396"],"'LocalStorage' is defined but never used.","'TextArea' is defined but never used.","'i18next' is defined but never used.","'Message' is defined but never used.","'LotForm' is defined but never used.","'TYPES' is defined but never used.","'Dropdown' is defined but never used.","'Calendar' is defined but never used.","'Map' is defined but never used.","'ProductForm' is defined but never used.","'Table' is defined but never used.","'Form' is defined but never used.","'CategoryForm' is defined but never used.","'Input' is defined but never used.","'VerificationUtils' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"397","fix":"398","desc":"399"},{"messageId":"400","fix":"401","desc":"402"},{"messageId":"397","fix":"403","desc":"399"},{"messageId":"400","fix":"404","desc":"402"},{"messageId":"397","fix":"405","desc":"399"},{"messageId":"400","fix":"406","desc":"402"},{"messageId":"397","fix":"407","desc":"399"},{"messageId":"400","fix":"408","desc":"402"},{"messageId":"397","fix":"409","desc":"399"},{"messageId":"400","fix":"410","desc":"402"},{"messageId":"397","fix":"411","desc":"399"},{"messageId":"400","fix":"412","desc":"402"},{"messageId":"397","fix":"413","desc":"399"},{"messageId":"400","fix":"414","desc":"402"},{"messageId":"397","fix":"415","desc":"399"},{"messageId":"400","fix":"416","desc":"402"},{"messageId":"397","fix":"417","desc":"399"},{"messageId":"400","fix":"418","desc":"402"},"removeEscape",{"range":"419","text":"420"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"421","text":"422"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"423","text":"420"},{"range":"424","text":"422"},{"range":"425","text":"420"},{"range":"426","text":"422"},{"range":"427","text":"420"},{"range":"428","text":"422"},{"range":"429","text":"420"},{"range":"430","text":"422"},{"range":"431","text":"420"},{"range":"432","text":"422"},{"range":"433","text":"420"},{"range":"434","text":"422"},{"range":"435","text":"420"},{"range":"436","text":"422"},{"range":"437","text":"420"},{"range":"438","text":"422"},[91,92],"",[91,91],"\\",[116,117],[116,116],[728,729],[728,728],[740,741],[740,740],[753,754],[753,753],[757,758],[757,757],[759,760],[759,759],[761,762],[761,761],[763,764],[763,763]]